[{"D:\\itra\\share-your-collections-app\\client\\src\\index.js":"1","D:\\itra\\share-your-collections-app\\client\\src\\App.js":"2","D:\\itra\\share-your-collections-app\\client\\src\\redux\\store.js":"3","D:\\itra\\share-your-collections-app\\client\\src\\shared\\auth.js":"4","D:\\itra\\share-your-collections-app\\client\\src\\shared\\Header.js":"5","D:\\itra\\share-your-collections-app\\client\\src\\CollectionsPage\\CollectionsPage.js":"6","D:\\itra\\share-your-collections-app\\client\\src\\HomePage\\HomePage.js":"7","D:\\itra\\share-your-collections-app\\client\\src\\redux\\reducer.js":"8","D:\\itra\\share-your-collections-app\\client\\src\\ItemPage\\ItemPage.js":"9","D:\\itra\\share-your-collections-app\\client\\src\\SignInPage\\SignInPage.js":"10","D:\\itra\\share-your-collections-app\\client\\src\\SignUpPage\\SignUpPage.js":"11","D:\\itra\\share-your-collections-app\\client\\src\\Search\\SearchPage.js":"12","D:\\itra\\share-your-collections-app\\client\\src\\CollectionsPage\\CollectionsContainer.js":"13","D:\\itra\\share-your-collections-app\\client\\src\\HomePage\\BiggestCollections.js":"14","D:\\itra\\share-your-collections-app\\client\\src\\HomePage\\LastItems.js":"15","D:\\itra\\share-your-collections-app\\client\\src\\CollectionsPage\\ControlPanel.js":"16","D:\\itra\\share-your-collections-app\\client\\src\\ItemPage\\Comments.js":"17","D:\\itra\\share-your-collections-app\\client\\src\\hooks\\useRequest.hook.js":"18","D:\\itra\\share-your-collections-app\\client\\src\\ItemPage\\ItemFields.js":"19","D:\\itra\\share-your-collections-app\\client\\src\\ItemPage\\Info.js":"20","D:\\itra\\share-your-collections-app\\client\\src\\CollectionsPage\\Collection.js":"21","D:\\itra\\share-your-collections-app\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"22","D:\\itra\\share-your-collections-app\\client\\src\\ItemPage\\Comment.js":"23","D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\CollectionPage.js":"24","D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\ItemsContainer.js":"25","D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\Info.js":"26","D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\SortView.js":"27","D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\FilterView.js":"28","D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\Item.js":"29","D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\ItemCreateModal.js":"30","D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"31","D:\\itra\\share-your-collections-app\\client\\src\\pages\\AdminPage\\AdminPage.js":"32","D:\\itra\\share-your-collections-app\\client\\src\\pages\\AdminPage\\UsersTable.js":"33","D:\\itra\\share-your-collections-app\\client\\src\\pages\\AdminPage\\ControlPanel.js":"34","D:\\itra\\share-your-collections-app\\client\\src\\pages\\AdminPage\\User.js":"35"},{"size":303,"mtime":1614622116000,"results":"36","hashOfConfig":"37"},{"size":3690,"mtime":1652664594046,"results":"38","hashOfConfig":"37"},{"size":104,"mtime":1614622116000,"results":"39","hashOfConfig":"37"},{"size":1110,"mtime":1614622116000,"results":"40","hashOfConfig":"37"},{"size":8701,"mtime":1652659988148,"results":"41","hashOfConfig":"37"},{"size":1643,"mtime":1652663045203,"results":"42","hashOfConfig":"37"},{"size":340,"mtime":1614622116000,"results":"43","hashOfConfig":"37"},{"size":1252,"mtime":1614622116000,"results":"44","hashOfConfig":"37"},{"size":2765,"mtime":1614622116000,"results":"45","hashOfConfig":"37"},{"size":4432,"mtime":1652653636926,"results":"46","hashOfConfig":"37"},{"size":3610,"mtime":1614622116000,"results":"47","hashOfConfig":"37"},{"size":4678,"mtime":1652663662949,"results":"48","hashOfConfig":"37"},{"size":1386,"mtime":1614622116000,"results":"49","hashOfConfig":"37"},{"size":1413,"mtime":1614622116000,"results":"50","hashOfConfig":"37"},{"size":1212,"mtime":1652663631034,"results":"51","hashOfConfig":"37"},{"size":2625,"mtime":1614622116000,"results":"52","hashOfConfig":"37"},{"size":3688,"mtime":1614622116000,"results":"53","hashOfConfig":"37"},{"size":1084,"mtime":1614622116000,"results":"54","hashOfConfig":"37"},{"size":6034,"mtime":1614622116000,"results":"55","hashOfConfig":"37"},{"size":8724,"mtime":1614622116000,"results":"56","hashOfConfig":"37"},{"size":1750,"mtime":1614622116000,"results":"57","hashOfConfig":"37"},{"size":8583,"mtime":1614622116000,"results":"58","hashOfConfig":"37"},{"size":428,"mtime":1614622116000,"results":"59","hashOfConfig":"37"},{"size":3449,"mtime":1614622116000,"results":"60","hashOfConfig":"37"},{"size":2218,"mtime":1614622116000,"results":"61","hashOfConfig":"37"},{"size":11641,"mtime":1652629123279,"results":"62","hashOfConfig":"37"},{"size":4150,"mtime":1652660998697,"results":"63","hashOfConfig":"37"},{"size":8975,"mtime":1614622116000,"results":"64","hashOfConfig":"37"},{"size":2404,"mtime":1614622116000,"results":"65","hashOfConfig":"37"},{"size":5281,"mtime":1614622116000,"results":"66","hashOfConfig":"37"},{"size":4542,"mtime":1614622116000,"results":"67","hashOfConfig":"37"},{"size":826,"mtime":1652664652314,"results":"68","hashOfConfig":"37"},{"size":2445,"mtime":1652664711810,"results":"69","hashOfConfig":"37"},{"size":2973,"mtime":1652664731623,"results":"70","hashOfConfig":"37"},{"size":1620,"mtime":1614622116000,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1t9467a",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\itra\\share-your-collections-app\\client\\src\\index.js",[],["152","153"],"D:\\itra\\share-your-collections-app\\client\\src\\App.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\redux\\store.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\shared\\auth.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\shared\\Header.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\HomePage\\HomePage.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\redux\\reducer.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\ItemPage\\ItemPage.js",["154"],"import React, {useEffect, useState} from \"react\"\nimport {useParams} from \"react-router\";\nimport {useRequest} from \"../hooks/useRequest.hook\";\nimport ReactLoading from \"react-loading\";\nimport {Container, Row} from \"react-bootstrap\";\nimport Info from \"./Info\";\nimport ItemFields from \"./ItemFields\";\nimport Comments from \"./Comments\";\n\nfunction ItemPage() {\n    const id = useParams().id\n    const {loading, request, error} = useRequest()\n    const [item, setItem] = useState({})\n\n    async function loadItem() {\n        const data = await request(\n            \"/api/items/getItem\",\n            \"POST\",\n            {id},\n            {\n                \"Content-Type\": \"application/json\"\n            }\n        )\n        if (data && data.ok) {\n            setItem(data.item)\n        }\n    }\n\n    async function edit(fields) {\n        if (fields.file) {\n            const formData = new FormData()\n            formData.append(\"file\", fields.file)\n            const data = await request(\n                \"/api/files/fileUpload\",\n                \"POST\",\n                formData\n            )\n            if (data && data.ok) {\n                fields.img_id = data.img_id\n                fields.img_format = data.img_format\n                await request(\n                    \"/api/items/editItem\",\n                    \"POST\",\n                    {\n                        ownerId: item.ownerId,\n                        id: item._id,\n                        token: localStorage.getItem(\"token\"),\n                        edit: fields\n                    },\n                    {\n                        \"Content-Type\": \"application/json\"\n                    }\n                )\n                loadItem().then()\n            }\n        } else {\n            await request(\n                \"/api/items/editItem\",\n                \"POST\",\n                {\n                    ownerId: item.ownerId,\n                    id: item._id,\n                    token: localStorage.getItem(\"token\"),\n                    edit: fields\n                },\n                {\n                    \"Content-Type\": \"application/json\"\n                }\n            )\n            loadItem().then()\n        }\n\n    }\n\n    useEffect(() => {\n        loadItem().then()\n    }, [])\n\n\n    if (loading) {\n        return (\n            <Row className=\"justify-content-md-center\">\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\n            </Row>\n        )\n    }\n    else {\n        return (\n            <Container>\n                <Info loading={loading} edit={edit} error={error} info={item} />\n                <ItemFields item={item} loadItem={loadItem} />\n                <Comments itemID={item._id}/>\n            </Container>\n        )\n\n    }\n}\nexport default ItemPage","D:\\itra\\share-your-collections-app\\client\\src\\SignInPage\\SignInPage.js",["155","156","157"],"import React, {useCallback, useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    const login = useCallback(async (type, user) => {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            } else {\r\n                setPassword(\"\")\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }, [theme, lang])\r\n\r\n    useEffect(() => {\r\n        const views = Array.from(document.getElementById(\"vk_auth\").childNodes)\r\n        console.log(views, theme, lang)\r\n        views.forEach(view => {\r\n            view.remove()\r\n        })\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [theme, lang])\r\n\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\r\n                            redirectUri={process.env.REACT_APP_URL}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","D:\\itra\\share-your-collections-app\\client\\src\\SignUpPage\\SignUpPage.js",["158"],"import React, {useState} from \"react\"\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\nimport {useRequest} from \"../hooks/useRequest.hook\"\nimport {useSelector} from \"react-redux\";\nconst languages = require(\"../languages.json\")\n\nexport default function SignUpPage() {\n    const [email, setEmail] = useState(\"\")\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const { loading, error, request, success } = useRequest()\n    const lang = useSelector(state => state.language)\n    const theme = useSelector(state => state.theme)\n\n    async function sendData(e, lang, theme) {\n        e.preventDefault()\n        try {\n            await request(\n                \"/api/auth/register\",\n                \"POST\",\n                {\n                    email,\n                    username,\n                    password,\n                    role: \"User\",\n                    lang,\n                    theme\n                },\n                {\n                    \"Content-Type\": \"application/json\"\n                }\n            )\n            if (!error) {\n                setEmail(\"\")\n                setUsername(\"\")\n                setPassword(\"\")\n            }\n        } catch(e) {\n            throw e\n        }\n\n    }\n    return (\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\n            <Col lg={{ span: 6, offset: 3 }}>\n                <Form>\n                    <Form.Group controlId=\"email\">\n                        <Form.Label>{languages[lang].email}</Form.Label>\n                        <Form.Control\n                            type=\"email\"\n                            placeholder=\"Enter email\"\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"username\">\n                        <Form.Label>{languages[lang].username}</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder={languages[lang].enterName}\n                            value={username}\n                            onChange={(e) => setUsername(e.target.value)}\n                        />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"password\">\n                        <Form.Label>{languages[lang].password}</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            placeholder={languages[lang].password}\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                    </Form.Group>\n\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\n                        <span>{error || success}</span>\n                    </Row>\n\n                    <Button\n                        variant=\"primary\"\n                        type=\"submit\"\n                        onClick={(e) => sendData(e, lang, theme)}\n                        disabled={loading}\n                    >\n                        {languages[lang].signUp}\n                    </Button>\n\n                    <Nav>\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\n                    </Nav>\n                </Form>\n            </Col>\n        </Container>\n    )\n}","D:\\itra\\share-your-collections-app\\client\\src\\Search\\SearchPage.js",["159"],"import React, {useEffect, useState} from \"react\"\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\nimport {useParams} from \"react-router\";\nimport {useRequest} from \"../hooks/useRequest.hook\";\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\nimport ReactLoading from \"react-loading\";\nimport Autosuggest from 'react-autosuggest';\nimport TagsInput from \"react-tagsinput\";\nimport {useSelector} from \"react-redux\";\nconst languages = require(\"../languages.json\")\n\n\nfunction SearchPage() {\n    const paramText = useParams().text\n    const lang = useSelector(state => state.language)\n    const [text, setText] = useState(paramText ? paramText : \"\")\n    const [input, setInput] = useState(\"\")\n    const [tags, setTags] = useState([])\n    const [allTags, setAllTags] = useState([])\n    const [suggestions, setSuggestions] = useState([])\n    const [result, setResult] = useState([])\n    const { request, loading } = useRequest()\n\n    useEffect(() => {\n        if (text) findItems().then()\n        loadTags().then()\n    }, [])\n\n    function suggestionHandler(value) {\n        setInput(value)\n        if (!value) return\n        setSuggestions(allTags.filter(e => {\n            let bool = false\n            for (let i = 0; i <= e.name.length - value.length; i++) {\n                if (e.name.substr(i, value.length) === value) bool = true\n            }\n            return bool\n        }))\n    }\n\n    async function loadTags() {\n        const data = await request(\n            \"/api/items/getTags\"\n        )\n        if (data && data.ok) {\n            setAllTags(data.tags)\n        }\n    }\n\n    async function findItems() {\n        const data = await request (\n            \"/api/items/findItems\",\n            \"POST\",\n            {\n                text,\n                tags\n            },\n            {\n                \"Content-Type\": \"application/json\"\n            }\n        )\n        if (data && data.ok) {\n            console.log(data)\n            setResult(data.items)\n        }\n    }\n\n    return (\n        <Container fluid>\n            <Container>\n                <Form inline>\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\n                        <Col xs={8} sm={9} md={10} xl={11}>\n                            <Form.Control\n                                type=\"text\"\n                                value={text}\n                                placeholder={languages[lang].header.search}\n                                className={\"w-100\"}\n                                onChange={(e) => setText(e.target.value)}\n                            />\n                        </Col>\n                        <Col xs={4} sm={3} md={2} lg={1}>\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\n                        </Col>\n                        <Col xs={8} className={\"mt-3\"}>\n                            <TagsInput\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\n                                value={tags}\n                                inputProps={{ style: {width: \"100%\"} }}\n                                onChange={(tags) => setTags(tags)}\n                                onChangeInput={suggestionHandler}\n                                inputValue={input}\n                            />\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n            {\n                loading ?\n                    <Row className=\"justify-content-md-center\">\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\n                    </Row> :\n                    <ItemsContainer items={result} size={2} />\n            }\n        </Container>\n    )\n}\n\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\n\n    return (\n        <Autosuggest\n            suggestions={suggestions}\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\n            getSuggestionValue={(suggestion) => suggestion.name}\n            renderSuggestion={renderSuggestion}\n            onSuggestionSelected={(e, {suggestion}) => {\n                addTag(suggestion.name)\n            }}\n            inputProps={{ ...props, onChange: props.onChange }}\n            onSuggestionsClearRequested={() => {}}\n            onSuggestionsFetchRequested={() => {}}\n        />\n    )\n}\n\nfunction renderSuggestion(suggestion) {\n    return (\n        <div className={\"suggestion\"}>\n            {suggestion.name}\n        </div>\n    )\n}\n\nexport default SearchPage","D:\\itra\\share-your-collections-app\\client\\src\\CollectionsPage\\CollectionsContainer.js",["160"],"import React from \"react\"\nimport {Container, Row} from \"react-bootstrap\";\nimport Collection from \"./Collection\";\nimport {useSelector} from \"react-redux\";\nconst language = require(\"../languages.json\")\n\nfunction CollectionsContainer({ collections }) {\n    const lang = useSelector(state => state.language)\n    const theme = useSelector(state => state.theme)\n\n    return (\n        <Container\n            style={{\n                display: \"flex\",\n                flexWrap: \"wrap\",\n                flexDirection: \"row\"\n            }}\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\n            fluid\n        >\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\n                <h1>{language[lang].collections.collections}</h1>\n            </Row>\n            <Row className={\"w-100 mt-3 m-auto\"}>\n                {\n                    collections && collections.length > 0 ?\n                        collections.map((e,i) => {\n                            return <Collection collection={e} index={i} key={i} />\n                        }) :\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\n                }\n            </Row>\n        </Container>\n\n    )\n}\n\nexport default CollectionsContainer\n","D:\\itra\\share-your-collections-app\\client\\src\\HomePage\\BiggestCollections.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\HomePage\\LastItems.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\CollectionsPage\\ControlPanel.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\ItemPage\\Comments.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\hooks\\useRequest.hook.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\ItemPage\\ItemFields.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\ItemPage\\Info.js",["161"],"import React, {useEffect, useState} from \"react\"\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\nimport {StyledDropZone} from \"react-drop-zone\";\nimport Image from \"cloudinary-react/lib/components/Image\";\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\nimport {useSelector} from \"react-redux\";\nimport {useRequest} from \"../hooks/useRequest.hook\";\nimport * as Icon from \"react-bootstrap-icons\"\nconst languages = require(\"../languages.json\")\n\nfunction Info({ info, loading2, edit }) {\n    const role = useSelector(state => state.role)\n    const userId = useSelector(state => state.userId)\n    const isAuthUser = useSelector(state => state.isAuthUser)\n    const lang = useSelector(state => state.language)\n    const theme = useSelector(state => state.theme)\n    const [isLiked, setIsLiked] = useState(true)\n    const [likesCount, setLikesCount] = useState(0)\n    const [editMode, setEditMode] = useState(false)\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\n    const [values, setValues] = useState({ name: info.name, file: null})\n    const [dropColor, setDropColor] = useState(\"#888\")\n    const { request, loading } = useRequest()\n\n    useEffect(() => {\n        setValues({ name: info.name, file: null })\n        if (info.likes && isAuthUser) {\n            setIsLiked(info.likes.includes(userId))\n            setLikesCount(info.likes.length)\n        }\n    }, [info, userId])\n\n    function onDrop(file) {\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\n        setValues({...values, file})\n        setDropText(\"Файл выбран (\" + name + \")\")\n        setDropColor(\"#74d239\")\n    }\n\n    async function setLike() {\n        if (loading || !isAuthUser) return\n        setIsLiked(!isLiked)\n        const data = await request (\n            \"/api/items/likeItem\",\n            \"POST\",\n            {\n                token: localStorage.getItem(\"token\"),\n                id: info._id\n            },\n            {\n                \"Content-Type\": \"application/json\"\n            }\n        )\n        if (data && data.ok) {\n            setIsLiked(data.like)\n            setLikesCount(likesCount + (data.like ? 1 : -1))\n        }\n    }\n\n    async function deleteItem() {\n        const data = await request(\n            \"/api/items/deleteItem\",\n            \"POST\",\n            {\n                token: localStorage.getItem(\"token\"),\n                id: info._id,\n                ownerId: info.ownerId,\n                parent: info.parent\n            },\n            {\n                \"Content-Type\": \"application/json\"\n            }\n        )\n        if (data && data.ok) {\n            window.location = \"/collection/\" + info.parent\n        }\n    }\n\n    function formHandler(e) {\n        setValues({...values, [e.target.name]: e.target.value})\n    }\n\n    function tryEdit() {\n        const fields = { file: values.file }\n        if (values.name !== info.name) fields.name = values.name\n        edit(fields)\n    }\n\n    return (\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\n            <Row>\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\n                    {\n                        editMode ?\n                            <StyledDropZone\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\n                                children={dropText}\n                                style={{ borderColor: dropColor }}\n                                onDrop={onDrop}\n                            /> :\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\n                            </Image>\n                    }\n                </Col>\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\n                    <Row>\n                        <Col lg={7} md={7} xs={12}>\n                            {\n                                editMode ?\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\n                                    :\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\n                            }\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\n                            <Col>\n                                <Row className={\"justify-content-center\"}>\n                                    {\n                                        isLiked ?\n                                            <Icon.HeartFill\n                                                style={{\n                                                    fontSize: \"30px\",\n                                                    color: \"#dd1c1c\",\n                                                    cursor: \"pointer\"\n                                                }}\n                                                onClick={setLike}\n                                            /> :\n                                            <Icon.Heart\n                                                style={{\n                                                    fontSize: \"30px\",\n                                                    color: \"#dd1c1c\",\n                                                    cursor: \"pointer\"\n                                                }}\n                                                onClick={setLike}\n                                            />\n                                    }\n                                </Row>\n                                <Row className={\"justify-content-center\"}>\n                                    <span>{likesCount}</span>\n                                </Row>\n                            </Col>\n\n                        </Col>\n                        <Col style={{\n                            display: \"flex\",\n                            flexDirection: \"column\"\n                        }}>\n                            {\n                                role === \"Admin\" || userId === info.ownerId ?\n                                    editMode ?\n                                        [\n                                            <Button\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\n                                                key={0}\n                                                disabled={loading2}\n                                                onClick={tryEdit}\n                                            >{languages[lang].save}\n                                            </Button>,\n                                            <Button\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\n                                                onClick={() => setEditMode(false)}\n                                                disabled={loading2}\n                                                key={1}\n                                            >{languages[lang].cancel}\n                                            </Button>\n                                        ] :\n                                        [\n                                            <Button\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\n                                                onClick={() => setEditMode(true)}\n                                                key={2}\n                                            >{languages[lang].editItem}\n                                            </Button>,\n                                            <Button\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\n                                                onClick={deleteItem}\n                                                key={3}\n                                            >{languages[lang].delete}\n                                            </Button>\n                                        ]\n                                        : []\n                            }\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Info","D:\\itra\\share-your-collections-app\\client\\src\\CollectionsPage\\Collection.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["162"],"import React, {useEffect, useState} from \"react\"\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\nimport { StyledDropZone } from 'react-drop-zone'\nimport 'react-drop-zone/dist/styles.css'\nimport ReactLoading from \"react-loading\";\nimport {useSelector} from \"react-redux\";\nconst languages = require(\"../languages.json\")\n\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\n    const lang = useSelector(state => state.language)\n    const [dropText, setDropText] = useState(lang === \"en\" ?\n                                                \"Click or drop your file here\" :\n                                                \"Нажми или сбрось свой файл сюда\")\n    const [dropColor, setDropColor] = useState(\"#888\")\n    const [type, setType] = useState(\"number\")\n    const [addError, setAddError] = useState(\"\")\n    const [advancedFields, setAdvancedFields] = useState([])\n    const [form, setForm] = useState({\n        file: null,\n        imgUrl: \"\",\n        name: \"\",\n        theme: \"Alcohol\",\n        description: \"\",\n        advancedFields\n    })\n\n    function formHandler(value, field) {\n        setForm({...form, [field]: value })\n    }\n\n    useEffect(() => {\n        setForm({...form, advancedFields})\n    }, [advancedFields])\n\n    function onDrop(file) {\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\n        setForm({...form, file })\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\n        setDropColor(\"#74d239\")\n    }\n\n    function addField() {\n        let count = 1\n        advancedFields.map((e) => {\n            if (e.type === type) count++\n            return null\n        })\n        if (count > 3) {\n            setAddError(\"Максимальное число полей такого типа 3\")\n            return\n        }\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\n        setAddError(\"\")\n    }\n\n    return (\n        <Modal show={show} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"collectionName\">\n                        <Form.Label>{languages[lang].name}</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\n                            value={form.name}\n                            placeholder={languages[lang].enterName}\n                        />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"themeSelect\">\n                        <Form.Label>{languages[lang].theme}</Form.Label>\n                        <Form.Control\n                            as=\"select\"\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\n                            value={form.theme}\n                        >\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\n                            <option value={\"Books\"}>{languages[lang].books}</option>\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\n                            <option value={\"Films\"}>{languages[lang].films}</option>\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Text>{languages[lang].addField}</Form.Text>\n                        <Form.Control\n                            as=\"select\"\n                            onChange={(e) => setType(e.target.value)}\n                            value={type}\n                        >\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\n                            <option value={\"text\"}>{languages[lang].textField}</option>\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\n                        </Form.Control>\n                        <Row>\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\n                        </Row>\n                        <Row>\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\n                        </Row>\n\n                    </Form.Group>\n                    <Form.Group controlId=\"themeSelect\">\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\n                        {\n                            advancedFields.map((e, i) => {\n                                if (e.type === \"text\") {\n                                    return <Form.Control\n                                        as=\"textarea\"\n                                        placeholder=\"Enter name of textarea\"\n                                        onChange={(e) => {\n                                            advancedFields[i].name = e.target.value\n                                        }}\n                                        className={\"mt-2\"}\n                                        key={i}\n                                        rows={3}\n                                    />\n                                }\n                                else {\n                                    return <Form.Control\n                                        type={\"input\"}\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\n                                        key={i}\n                                        className={\"mt-2\"}\n                                        onChange={(e) => {\n                                            advancedFields[i].name = e.target.value\n                                        }}\n                                    />\n                                }\n                            })\n                        }\n                    </Form.Group>\n\n                    <Form.Group controlId=\"description\">\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\n                        <StyledDropZone\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\n                            children={dropText}\n                            style={{ borderColor: dropColor }}\n                            onDrop={onDrop}\n                        />\n                    </Form.Group>\n\n\n                    <Form.Group controlId=\"description\">\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\n                        <Form.Control\n                            as=\"textarea\"\n                            rows={4}\n                            placeholder={languages[lang].description}\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\n                            value={form.description}\n                        />\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer className=\"container align-items-md-center\">\n                <Row className={\"justify-content-md-center w-100\"}>\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\n                </Row>\n                {\n                    !loading\n                    ?\n                        <Row className=\"justify-content-md-center w-100\">\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\n                                {languages[lang].createCollection}\n                            </Button>\n                        </Row>\n                    :\n                        <Row className=\"justify-content-md-center w-100\">\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\n                        </Row>\n                }\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\n\nexport default CreateCollectionModal","D:\\itra\\share-your-collections-app\\client\\src\\ItemPage\\Comment.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\CollectionPage.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\ItemsContainer.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\Info.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\SortView.js",["163"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Form, Row} from \"react-bootstrap\"\nimport {useSelector} from \"react-redux\";\nconst language = require(\"../languages.json\")\n\nfunction SortView({ showedItems, setShowedItems, allItems }) {\n    const [fields, setFields] = useState(null)\n    const [sort, setSort] = useState({ value: \"no\" })\n    const [itemsCount, setItemsCount] = useState(0)\n    const lang = useSelector(state => state.language)\n\n    useEffect(() => {\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\n    }, [showedItems])\n\n    useEffect(() => {\n        if (itemsCount !== showedItems.length) {\n            setSort({ value: \"no\", control: \"no\" })\n            setItemsCount(showedItems.length)\n        }\n    }, [itemsCount, showedItems])\n\n    useEffect(() => {\n        let items = [...showedItems]\n        if (!sort ) return\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\n        else if (sort.index === undefined) {\n            items = items.sort((a, b) => {\n                if (sort.value === \"ml\") {\n                    return a.name <= b.name ? -1 : 1\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\n                return 1\n            })\n        } else {\n            if (sort.type === \"number\") {\n                items = items.sort((a, b) => {\n                    if (sort.value === \"ml\") {\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\n                    } else if (sort.value === \"lm\") {\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\n                    }\n                    return 1\n                })\n            } else if (sort.type === \"date\") {\n                items = items.sort((a, b) => {\n                    if (sort.value === \"ml\") {\n                        return (new Date(a.fields[sort.index].value)).getTime()\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\n                    } else if (sort.value === \"lm\") {\n                        return (new Date(a.fields[sort.index].value)).getTime()\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\n                    }\n                    return 1\n                })\n            }\n        }\n        setShowedItems([...items])\n    }, [sort, allItems])\n\n    return (\n        <Row className={\"justify-content-end\"}>\n            <Col>\n                <Row>\n                    <Form.Text>Сортировка</Form.Text>\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\n                        value: e.target.value.split(\" \")[0],\n                        index: e.target.value.split(\" \")[1],\n                        type: e.target.value.split(\" \")[2],\n                        control: e.target.value\n                    })}>\n                        <option value={\"no\"}>{language[lang].noSort}</option>\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\n                        {\n                            fields && fields.map((e, i) => {\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\n                                    <option\n                                        value={\"lm \" + String(i) + \" \" + e.type}\n                                        key={i}\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\n                                    <option\n                                        value={\"ml \" + String(i) + \" \" + e.type}\n                                        key={i + 1}\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\n                                ]} else return null\n                            })\n                        }\n                    </Form.Control>\n                </Row>\n            </Col>\n        </Row>\n    )\n}\n\nexport default SortView","D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\FilterView.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\Item.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\ItemCreateModal.js",["164"],"import React, {useEffect, useState} from \"react\"\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\nimport {StyledDropZone} from \"react-drop-zone\";\nimport ReactLoading from \"react-loading\";\nimport TagsInput from 'react-tagsinput'\nimport 'react-tagsinput/react-tagsinput.css'\nimport {useSelector} from \"react-redux\";\nconst languages = require(\"../languages.json\")\n\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\n    const lang = useSelector(state => state.language)\n    const [dropText, setDropText] = useState(lang === \"en\" ?\n                                            \"Click or drop your file here\" :\n                                            \"Нажми или сбрось свой файл сюда\")\n    const [dropColor, setDropColor] = useState(\"#888\")\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\n    const [file, setFile] = useState(null)\n\n    useEffect(() => {\n        setItem({...item, fields})\n    }, [fields])\n\n    function onDrop(file) {\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\n        setDropColor(\"#74d239\")\n        const formData = new FormData()\n        formData.append(\"file\", file)\n        setFile(formData)\n    }\n\n\n    return (\n        <Modal show={show} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form.Group>\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\n                    <Form.Control\n                        type={\"text\"}\n                        onChange={(e) => setItem({...item, name: e.target.value})}\n                    />\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\n                    {\n                        fields.map((field, i) => {\n                            if (field.type === \"text\") {\n                                return [\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\n                                    <Form.Control\n                                        key={i + 1}\n                                        as=\"textarea\"\n                                        onChange={(e) => {\n                                            item.fields[i].value = e.target.value\n                                        }}\n                                    />\n                                ]\n                            } else {\n                                return [\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\n                                    <Form.Control\n                                        key={i + 1}\n                                        type={field.type}\n                                        onChange={(e) => {\n                                            item.fields[i].value = (field.type !== \"checkbox\"\n                                                ? e.target.value :\n                                                e.target.checked)\n                                        }}\n                                    />\n                                ]\n                            }\n                        })\n                    }\n                </Form.Group>\n                <Form.Group controlId=\"image\">\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\n                    <StyledDropZone\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\n                        children={dropText}\n                        style={{ borderColor: dropColor }}\n                        onDrop={onDrop}\n                    />\n                </Form.Group>\n            </Modal.Body>\n            <Modal.Footer className=\"container align-items-md-center\">\n                <Row className={\"justify-content-md-center w-100\"}>\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\n                </Row>\n                {\n                    !loading\n                        ?\n                        <Row className=\"justify-content-md-center w-100\">\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\n                                {languages[lang].createItem}\n                            </Button>\n                        </Row>\n                        :\n                        <Row className=\"justify-content-md-center w-100\">\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\n                        </Row>\n                }\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default ItemCreateModal","D:\\itra\\share-your-collections-app\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\pages\\AdminPage\\AdminPage.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\pages\\AdminPage\\UsersTable.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\pages\\AdminPage\\ControlPanel.js",[],"D:\\itra\\share-your-collections-app\\client\\src\\pages\\AdminPage\\User.js",[],{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":77,"column":8,"nodeType":"171","endLine":77,"endColumn":10,"suggestions":"172"},{"ruleId":"169","severity":1,"message":"173","line":43,"column":8,"nodeType":"171","endLine":43,"endColumn":21,"suggestions":"174"},{"ruleId":"169","severity":1,"message":"175","line":54,"column":8,"nodeType":"171","endLine":54,"endColumn":21,"suggestions":"176"},{"ruleId":"177","severity":1,"message":"178","line":58,"column":43,"nodeType":"179","messageId":"180","endLine":58,"endColumn":44},{"ruleId":"177","severity":1,"message":"178","line":44,"column":43,"nodeType":"179","messageId":"180","endLine":44,"endColumn":44},{"ruleId":"169","severity":1,"message":"181","line":27,"column":8,"nodeType":"171","endLine":27,"endColumn":10,"suggestions":"182"},{"ruleId":"177","severity":1,"message":"178","line":18,"column":36,"nodeType":"179","messageId":"180","endLine":18,"endColumn":37},{"ruleId":"169","severity":1,"message":"183","line":31,"column":8,"nodeType":"171","endLine":31,"endColumn":22,"suggestions":"184"},{"ruleId":"169","severity":1,"message":"185","line":33,"column":8,"nodeType":"171","endLine":33,"endColumn":24,"suggestions":"186"},{"ruleId":"169","severity":1,"message":"187","line":58,"column":8,"nodeType":"171","endLine":58,"endColumn":24,"suggestions":"188"},{"ruleId":"169","severity":1,"message":"189","line":21,"column":8,"nodeType":"171","endLine":21,"endColumn":16,"suggestions":"190"},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.","ArrayExpression",["193"],"React Hook useCallback has missing dependencies: 'dispatch' and 'request'. Either include them or remove the dependency array.",["194"],"React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["195"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["196"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["197"],"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.",["198"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["199"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["200"],"no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},"Update the dependencies array to be: [loadItem]",{"range":"217","text":"218"},"Update the dependencies array to be: [request, lang, theme, dispatch]",{"range":"219","text":"220"},"Update the dependencies array to be: [theme, lang, login]",{"range":"221","text":"222"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"223","text":"224"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"225","text":"226"},"Update the dependencies array to be: [advancedFields, form]",{"range":"227","text":"228"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"229","text":"230"},"Update the dependencies array to be: [fields, item]",{"range":"231","text":"232"},[2236,2238],"[loadItem]",[1544,1557],"[request, lang, theme, dispatch]",[1892,1905],"[theme, lang, login]",[1042,1044],"[findItems, loadTags, text]",[1434,1448],"[info, isAuthUser, userId]",[1234,1250],"[advancedFields, form]",[2443,2459],"[sort, allItems, showedItems, setShowedItems]",[949,957],"[fields, item]"]