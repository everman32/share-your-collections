<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33"},{"size":317,"mtime":1609784996776,"results":"34","hashOfConfig":"35"},{"size":3826,"mtime":1611163900116,"results":"36","hashOfConfig":"35"},{"size":8194,"mtime":1611163703298,"results":"37","hashOfConfig":"35"},{"size":1116,"mtime":1609766071482,"results":"38","hashOfConfig":"35"},{"size":1013,"mtime":1611163900135,"results":"39","hashOfConfig":"35"},{"size":107,"mtime":1609510693737,"results":"40","hashOfConfig":"35"},{"size":1298,"mtime":1610484545110,"results":"41","hashOfConfig":"35"},{"size":2695,"mtime":1611158979614,"results":"42","hashOfConfig":"35"},{"size":8506,"mtime":1610819110079,"results":"43","hashOfConfig":"35"},{"size":1425,"mtime":1611158495529,"results":"44","hashOfConfig":"35"},{"size":1779,"mtime":1611158909489,"results":"45","hashOfConfig":"35"},{"size":3502,"mtime":1611164081458,"results":"46","hashOfConfig":"35"},{"size":4093,"mtime":1611164053301,"results":"47","hashOfConfig":"35"},{"size":804,"mtime":1610377267941,"results":"48","hashOfConfig":"35"},{"size":352,"mtime":1611159377405,"results":"49","hashOfConfig":"35"},{"size":1730,"mtime":1610487463887,"results":"50","hashOfConfig":"35"},{"size":3048,"mtime":1610720686457,"results":"51","hashOfConfig":"35"},{"size":2505,"mtime":1611159716133,"results":"52","hashOfConfig":"35"},{"size":1669,"mtime":1610410486549,"results":"53","hashOfConfig":"35"},{"size":3474,"mtime":1611156955409,"results":"54","hashOfConfig":"35"},{"size":10840,"mtime":1611159011217,"results":"55","hashOfConfig":"35"},{"size":5371,"mtime":1610724495124,"results":"56","hashOfConfig":"35"},{"size":1295,"mtime":1611158505900,"results":"57","hashOfConfig":"35"},{"size":2289,"mtime":1611158817485,"results":"58","hashOfConfig":"35"},{"size":2862,"mtime":1610484113652,"results":"59","hashOfConfig":"35"},{"size":8817,"mtime":1611159098057,"results":"60","hashOfConfig":"35"},{"size":5989,"mtime":1611159156914,"results":"61","hashOfConfig":"35"},{"size":4656,"mtime":1610819367290,"results":"62","hashOfConfig":"35"},{"size":3508,"mtime":1611159241128,"results":"63","hashOfConfig":"35"},{"size":440,"mtime":1610297150301,"results":"64","hashOfConfig":"35"},{"size":4812,"mtime":1611155410931,"results":"65","hashOfConfig":"35"},{"size":1192,"mtime":1611155623122,"results":"66","hashOfConfig":"35"},{"size":1399,"mtime":1611157845275,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"64clop",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["134"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["135"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["136"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["137","138"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",["139"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",["140","141"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",["142"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["143"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["144"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",["145"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["146"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",["147"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",["148"],{"ruleId":"149","severity":1,"message":"150","line":33,"column":8,"nodeType":"151","endLine":33,"endColumn":24,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":18,"column":36,"nodeType":"155","messageId":"156","endLine":18,"endColumn":37},{"ruleId":"153","severity":1,"message":"154","line":42,"column":43,"nodeType":"155","messageId":"156","endLine":42,"endColumn":44},{"ruleId":"149","severity":1,"message":"157","line":21,"column":8,"nodeType":"151","endLine":21,"endColumn":10,"suggestions":"158"},{"ruleId":"153","severity":1,"message":"154","line":47,"column":43,"nodeType":"155","messageId":"156","endLine":47,"endColumn":44},{"ruleId":"149","severity":1,"message":"159","line":18,"column":8,"nodeType":"151","endLine":18,"endColumn":10,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":12,"column":11,"nodeType":"163","messageId":"164","endLine":12,"endColumn":15},{"ruleId":"149","severity":1,"message":"165","line":33,"column":8,"nodeType":"151","endLine":33,"endColumn":17,"suggestions":"166"},{"ruleId":"149","severity":1,"message":"167","line":91,"column":8,"nodeType":"151","endLine":91,"endColumn":10,"suggestions":"168"},{"ruleId":"149","severity":1,"message":"169","line":21,"column":8,"nodeType":"151","endLine":21,"endColumn":16,"suggestions":"170"},{"ruleId":"149","severity":1,"message":"171","line":77,"column":8,"nodeType":"151","endLine":77,"endColumn":10,"suggestions":"172"},{"ruleId":"149","severity":1,"message":"173","line":18,"column":8,"nodeType":"151","endLine":18,"endColumn":16,"suggestions":"174"},{"ruleId":"149","severity":1,"message":"175","line":27,"column":8,"nodeType":"151","endLine":27,"endColumn":10,"suggestions":"176"},{"ruleId":"149","severity":1,"message":"177","line":23,"column":8,"nodeType":"151","endLine":23,"endColumn":10,"suggestions":"178"},{"ruleId":"149","severity":1,"message":"179","line":26,"column":8,"nodeType":"151","endLine":26,"endColumn":10,"suggestions":"180"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["181"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["182"],"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["183"],"no-unused-vars","'lang' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["184"],"React Hook useEffect has a missing dependency: 'loadCollection'. Either include it or remove the dependency array.",["185"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["186"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["187"],"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",["188"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["189"],"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has a missing dependency: 'loadCollections'. Either include it or remove the dependency array.",["191"],{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},"Update the dependencies array to be: [advancedFields, form]",{"range":"214","text":"215"},"Update the dependencies array to be: [login]",{"range":"216","text":"217"},"Update the dependencies array to be: [loadUsers]",{"range":"218","text":"219"},"Update the dependencies array to be: [loadUser, ownerId]",{"range":"220","text":"221"},"Update the dependencies array to be: [loadCollection]",{"range":"222","text":"223"},"Update the dependencies array to be: [fields, item]",{"range":"224","text":"225"},"Update the dependencies array to be: [loadItem]",{"range":"226","text":"227"},"Update the dependencies array to be: [itemID, loadComments]",{"range":"228","text":"229"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"230","text":"231"},"Update the dependencies array to be: [loadItems]",{"range":"232","text":"233"},"Update the dependencies array to be: [loadCollections]",{"range":"234","text":"235"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[564,566],"[loadUsers]",[1118,1127],"[loadUser, ownerId]",[2808,2810],"[loadCollection]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[713,721],"[itemID, loadComments]",[1068,1070],"[findItems, loadTags, text]",[729,731],"[loadItems]",[948,950],"[loadCollections]"]
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> search+likes+eng
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> redirect-uri-google
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> relise2
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> someStyles
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> someStyles
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> relise3
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> filterFix
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> fix
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> someAdaptivFixes
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> filterFixes
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> CSV + someFixes
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> csvDowload
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> fix
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> fix
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> relise4
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> relise6
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> relise6
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> someFixes
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> last
=======
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> superMegaGiperLast
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33"},{"size":317,"mtime":1609784996776,"results":"34","hashOfConfig":"35"},{"size":3826,"mtime":1611163900116,"results":"36","hashOfConfig":"35"},{"size":8194,"mtime":1611163703298,"results":"37","hashOfConfig":"35"},{"size":1116,"mtime":1609766071482,"results":"38","hashOfConfig":"35"},{"size":1013,"mtime":1611163900135,"results":"39","hashOfConfig":"35"},{"size":107,"mtime":1609510693737,"results":"40","hashOfConfig":"35"},{"size":1298,"mtime":1610484545110,"results":"41","hashOfConfig":"35"},{"size":2695,"mtime":1611158979614,"results":"42","hashOfConfig":"35"},{"size":8506,"mtime":1610819110079,"results":"43","hashOfConfig":"35"},{"size":1425,"mtime":1611158495529,"results":"44","hashOfConfig":"35"},{"size":1779,"mtime":1611158909489,"results":"45","hashOfConfig":"35"},{"size":3502,"mtime":1611164081458,"results":"46","hashOfConfig":"35"},{"size":4093,"mtime":1611164053301,"results":"47","hashOfConfig":"35"},{"size":804,"mtime":1610377267941,"results":"48","hashOfConfig":"35"},{"size":352,"mtime":1611159377405,"results":"49","hashOfConfig":"35"},{"size":1730,"mtime":1610487463887,"results":"50","hashOfConfig":"35"},{"size":3048,"mtime":1610720686457,"results":"51","hashOfConfig":"35"},{"size":2505,"mtime":1611159716133,"results":"52","hashOfConfig":"35"},{"size":1669,"mtime":1610410486549,"results":"53","hashOfConfig":"35"},{"size":3474,"mtime":1611156955409,"results":"54","hashOfConfig":"35"},{"size":10840,"mtime":1611159011217,"results":"55","hashOfConfig":"35"},{"size":5371,"mtime":1610724495124,"results":"56","hashOfConfig":"35"},{"size":1295,"mtime":1611158505900,"results":"57","hashOfConfig":"35"},{"size":2289,"mtime":1611158817485,"results":"58","hashOfConfig":"35"},{"size":2862,"mtime":1610484113652,"results":"59","hashOfConfig":"35"},{"size":8817,"mtime":1611159098057,"results":"60","hashOfConfig":"35"},{"size":5989,"mtime":1611159156914,"results":"61","hashOfConfig":"35"},{"size":4656,"mtime":1610819367290,"results":"62","hashOfConfig":"35"},{"size":3508,"mtime":1611159241128,"results":"63","hashOfConfig":"35"},{"size":440,"mtime":1610297150301,"results":"64","hashOfConfig":"35"},{"size":4812,"mtime":1611155410931,"results":"65","hashOfConfig":"35"},{"size":1192,"mtime":1611155623122,"results":"66","hashOfConfig":"35"},{"size":1399,"mtime":1611157845275,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"64clop",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["134"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["135"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["136"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["137","138"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",["139"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",["140","141"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",["142"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["143"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["144"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",["145"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["146"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",["147"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",["148"],{"ruleId":"149","severity":1,"message":"150","line":33,"column":8,"nodeType":"151","endLine":33,"endColumn":24,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":18,"column":36,"nodeType":"155","messageId":"156","endLine":18,"endColumn":37},{"ruleId":"153","severity":1,"message":"154","line":42,"column":43,"nodeType":"155","messageId":"156","endLine":42,"endColumn":44},{"ruleId":"149","severity":1,"message":"157","line":21,"column":8,"nodeType":"151","endLine":21,"endColumn":10,"suggestions":"158"},{"ruleId":"153","severity":1,"message":"154","line":47,"column":43,"nodeType":"155","messageId":"156","endLine":47,"endColumn":44},{"ruleId":"149","severity":1,"message":"159","line":18,"column":8,"nodeType":"151","endLine":18,"endColumn":10,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":12,"column":11,"nodeType":"163","messageId":"164","endLine":12,"endColumn":15},{"ruleId":"149","severity":1,"message":"165","line":33,"column":8,"nodeType":"151","endLine":33,"endColumn":17,"suggestions":"166"},{"ruleId":"149","severity":1,"message":"167","line":91,"column":8,"nodeType":"151","endLine":91,"endColumn":10,"suggestions":"168"},{"ruleId":"149","severity":1,"message":"169","line":21,"column":8,"nodeType":"151","endLine":21,"endColumn":16,"suggestions":"170"},{"ruleId":"149","severity":1,"message":"171","line":77,"column":8,"nodeType":"151","endLine":77,"endColumn":10,"suggestions":"172"},{"ruleId":"149","severity":1,"message":"173","line":18,"column":8,"nodeType":"151","endLine":18,"endColumn":16,"suggestions":"174"},{"ruleId":"149","severity":1,"message":"175","line":27,"column":8,"nodeType":"151","endLine":27,"endColumn":10,"suggestions":"176"},{"ruleId":"149","severity":1,"message":"177","line":23,"column":8,"nodeType":"151","endLine":23,"endColumn":10,"suggestions":"178"},{"ruleId":"149","severity":1,"message":"179","line":26,"column":8,"nodeType":"151","endLine":26,"endColumn":10,"suggestions":"180"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["181"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["182"],"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["183"],"no-unused-vars","'lang' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["184"],"React Hook useEffect has a missing dependency: 'loadCollection'. Either include it or remove the dependency array.",["185"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["186"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["187"],"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",["188"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["189"],"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has a missing dependency: 'loadCollections'. Either include it or remove the dependency array.",["191"],{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},"Update the dependencies array to be: [advancedFields, form]",{"range":"214","text":"215"},"Update the dependencies array to be: [login]",{"range":"216","text":"217"},"Update the dependencies array to be: [loadUsers]",{"range":"218","text":"219"},"Update the dependencies array to be: [loadUser, ownerId]",{"range":"220","text":"221"},"Update the dependencies array to be: [loadCollection]",{"range":"222","text":"223"},"Update the dependencies array to be: [fields, item]",{"range":"224","text":"225"},"Update the dependencies array to be: [loadItem]",{"range":"226","text":"227"},"Update the dependencies array to be: [itemID, loadComments]",{"range":"228","text":"229"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"230","text":"231"},"Update the dependencies array to be: [loadItems]",{"range":"232","text":"233"},"Update the dependencies array to be: [loadCollections]",{"range":"234","text":"235"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[564,566],"[loadUsers]",[1118,1127],"[loadUser, ownerId]",[2808,2810],"[loadCollection]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[713,721],"[itemID, loadComments]",[1068,1070],"[findItems, loadTags, text]",[729,731],"[loadItems]",[948,950],"[loadCollections]"]
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33"},{"size":317,"mtime":1609784996776,"results":"34","hashOfConfig":"35"},{"size":3826,"mtime":1611226146272,"results":"36","hashOfConfig":"35"},{"size":8194,"mtime":1611163703298,"results":"37","hashOfConfig":"35"},{"size":1116,"mtime":1609766071482,"results":"38","hashOfConfig":"35"},{"size":1013,"mtime":1611163900135,"results":"39","hashOfConfig":"35"},{"size":107,"mtime":1609510693737,"results":"40","hashOfConfig":"35"},{"size":1298,"mtime":1610484545110,"results":"41","hashOfConfig":"35"},{"size":2695,"mtime":1611158979614,"results":"42","hashOfConfig":"35"},{"size":8506,"mtime":1610819110079,"results":"43","hashOfConfig":"35"},{"size":1425,"mtime":1611158495529,"results":"44","hashOfConfig":"35"},{"size":1779,"mtime":1611158909489,"results":"45","hashOfConfig":"35"},{"size":3502,"mtime":1611164081458,"results":"46","hashOfConfig":"35"},{"size":4093,"mtime":1611164053301,"results":"47","hashOfConfig":"35"},{"size":804,"mtime":1610377267941,"results":"48","hashOfConfig":"35"},{"size":352,"mtime":1611159377405,"results":"49","hashOfConfig":"35"},{"size":1730,"mtime":1610487463887,"results":"50","hashOfConfig":"35"},{"size":3048,"mtime":1610720686457,"results":"51","hashOfConfig":"35"},{"size":2505,"mtime":1611159716133,"results":"52","hashOfConfig":"35"},{"size":1669,"mtime":1610410486549,"results":"53","hashOfConfig":"35"},{"size":3474,"mtime":1611156955409,"results":"54","hashOfConfig":"35"},{"size":10840,"mtime":1611159011217,"results":"55","hashOfConfig":"35"},{"size":5371,"mtime":1610724495124,"results":"56","hashOfConfig":"35"},{"size":1295,"mtime":1611158505900,"results":"57","hashOfConfig":"35"},{"size":2289,"mtime":1611158817485,"results":"58","hashOfConfig":"35"},{"size":2862,"mtime":1610484113652,"results":"59","hashOfConfig":"35"},{"size":8817,"mtime":1611159098057,"results":"60","hashOfConfig":"35"},{"size":5989,"mtime":1611159156914,"results":"61","hashOfConfig":"35"},{"size":4656,"mtime":1610819367290,"results":"62","hashOfConfig":"35"},{"size":3508,"mtime":1611159241128,"results":"63","hashOfConfig":"35"},{"size":440,"mtime":1610297150301,"results":"64","hashOfConfig":"35"},{"size":4812,"mtime":1611155410931,"results":"65","hashOfConfig":"35"},{"size":1192,"mtime":1611155623122,"results":"66","hashOfConfig":"35"},{"size":1399,"mtime":1611157845275,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"64clop",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["135","136"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["137"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["138"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["139"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["140","141"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",["142"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",["143","144"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",["145"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["146"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["147"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",["148"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["149"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",["150"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",["151"],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":33,"column":8,"nodeType":"158","endLine":33,"endColumn":24,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":18,"column":36,"nodeType":"162","messageId":"163","endLine":18,"endColumn":37},{"ruleId":"160","severity":1,"message":"161","line":42,"column":43,"nodeType":"162","messageId":"163","endLine":42,"endColumn":44},{"ruleId":"156","severity":1,"message":"164","line":21,"column":8,"nodeType":"158","endLine":21,"endColumn":10,"suggestions":"165"},{"ruleId":"160","severity":1,"message":"161","line":47,"column":43,"nodeType":"162","messageId":"163","endLine":47,"endColumn":44},{"ruleId":"156","severity":1,"message":"166","line":18,"column":8,"nodeType":"158","endLine":18,"endColumn":10,"suggestions":"167"},{"ruleId":"168","severity":1,"message":"169","line":12,"column":11,"nodeType":"170","messageId":"171","endLine":12,"endColumn":15},{"ruleId":"156","severity":1,"message":"172","line":33,"column":8,"nodeType":"158","endLine":33,"endColumn":17,"suggestions":"173"},{"ruleId":"156","severity":1,"message":"174","line":91,"column":8,"nodeType":"158","endLine":91,"endColumn":10,"suggestions":"175"},{"ruleId":"156","severity":1,"message":"176","line":21,"column":8,"nodeType":"158","endLine":21,"endColumn":16,"suggestions":"177"},{"ruleId":"156","severity":1,"message":"178","line":77,"column":8,"nodeType":"158","endLine":77,"endColumn":10,"suggestions":"179"},{"ruleId":"156","severity":1,"message":"180","line":18,"column":8,"nodeType":"158","endLine":18,"endColumn":16,"suggestions":"181"},{"ruleId":"156","severity":1,"message":"182","line":27,"column":8,"nodeType":"158","endLine":27,"endColumn":10,"suggestions":"183"},{"ruleId":"156","severity":1,"message":"184","line":23,"column":8,"nodeType":"158","endLine":23,"endColumn":10,"suggestions":"185"},{"ruleId":"156","severity":1,"message":"186","line":26,"column":8,"nodeType":"158","endLine":26,"endColumn":10,"suggestions":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["190"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["191"],"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["192"],"no-unused-vars","'lang' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has a missing dependency: 'loadCollection'. Either include it or remove the dependency array.",["194"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["195"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["196"],"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",["197"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["198"],"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.",["199"],"React Hook useEffect has a missing dependency: 'loadCollections'. Either include it or remove the dependency array.",["200"],"no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},"Update the dependencies array to be: [advancedFields, form]",{"range":"223","text":"224"},"Update the dependencies array to be: [login]",{"range":"225","text":"226"},"Update the dependencies array to be: [loadUsers]",{"range":"227","text":"228"},"Update the dependencies array to be: [loadUser, ownerId]",{"range":"229","text":"230"},"Update the dependencies array to be: [loadCollection]",{"range":"231","text":"232"},"Update the dependencies array to be: [fields, item]",{"range":"233","text":"234"},"Update the dependencies array to be: [loadItem]",{"range":"235","text":"236"},"Update the dependencies array to be: [itemID, loadComments]",{"range":"237","text":"238"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"239","text":"240"},"Update the dependencies array to be: [loadItems]",{"range":"241","text":"242"},"Update the dependencies array to be: [loadCollections]",{"range":"243","text":"244"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[564,566],"[loadUsers]",[1118,1127],"[loadUser, ownerId]",[2808,2810],"[loadCollection]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[713,721],"[itemID, loadComments]",[1068,1070],"[findItems, loadTags, text]",[729,731],"[loadItems]",[948,950],"[loadCollections]"]
>>>>>>> fix
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33"},{"size":317,"mtime":1609784996776,"results":"34","hashOfConfig":"35"},{"size":3826,"mtime":1611226146272,"results":"36","hashOfConfig":"35"},{"size":8194,"mtime":1611163703298,"results":"37","hashOfConfig":"35"},{"size":1116,"mtime":1609766071482,"results":"38","hashOfConfig":"35"},{"size":1013,"mtime":1611163900135,"results":"39","hashOfConfig":"35"},{"size":107,"mtime":1609510693737,"results":"40","hashOfConfig":"35"},{"size":1298,"mtime":1610484545110,"results":"41","hashOfConfig":"35"},{"size":2695,"mtime":1611158979614,"results":"42","hashOfConfig":"35"},{"size":8506,"mtime":1610819110079,"results":"43","hashOfConfig":"35"},{"size":1425,"mtime":1611158495529,"results":"44","hashOfConfig":"35"},{"size":1779,"mtime":1611158909489,"results":"45","hashOfConfig":"35"},{"size":3502,"mtime":1611164081458,"results":"46","hashOfConfig":"35"},{"size":4093,"mtime":1611164053301,"results":"47","hashOfConfig":"35"},{"size":804,"mtime":1610377267941,"results":"48","hashOfConfig":"35"},{"size":352,"mtime":1611159377405,"results":"49","hashOfConfig":"35"},{"size":1730,"mtime":1610487463887,"results":"50","hashOfConfig":"35"},{"size":3048,"mtime":1610720686457,"results":"51","hashOfConfig":"35"},{"size":2505,"mtime":1611159716133,"results":"52","hashOfConfig":"35"},{"size":1669,"mtime":1610410486549,"results":"53","hashOfConfig":"35"},{"size":3474,"mtime":1611156955409,"results":"54","hashOfConfig":"35"},{"size":10840,"mtime":1611159011217,"results":"55","hashOfConfig":"35"},{"size":5371,"mtime":1610724495124,"results":"56","hashOfConfig":"35"},{"size":1295,"mtime":1611158505900,"results":"57","hashOfConfig":"35"},{"size":2289,"mtime":1611158817485,"results":"58","hashOfConfig":"35"},{"size":2862,"mtime":1610484113652,"results":"59","hashOfConfig":"35"},{"size":8817,"mtime":1611159098057,"results":"60","hashOfConfig":"35"},{"size":5989,"mtime":1611159156914,"results":"61","hashOfConfig":"35"},{"size":4656,"mtime":1610819367290,"results":"62","hashOfConfig":"35"},{"size":3508,"mtime":1611159241128,"results":"63","hashOfConfig":"35"},{"size":440,"mtime":1610297150301,"results":"64","hashOfConfig":"35"},{"size":4812,"mtime":1611155410931,"results":"65","hashOfConfig":"35"},{"size":1192,"mtime":1611155623122,"results":"66","hashOfConfig":"35"},{"size":1399,"mtime":1611157845275,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"64clop",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"70"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["148","149"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["150"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["151"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["152"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\"\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["153","154"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"http://localhost:3000\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",["155"],"import React, {useEffect, useState} from 'react'\r\nimport UsersTable from \"./UsersTable\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {Container} from \"react-bootstrap\";\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\nfunction AdminPage() {\r\n    const { loading, request, error } = useRequest()\r\n    const [userData, setUserData] = useState([])\r\n\r\n    async function loadUsers() {\r\n        const data = await request(\"/api/users/getUsers\")\r\n        if (data) setUserData(data.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadUsers().then()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ControlPanel load={loadUsers} />\r\n            <UsersTable usersData={userData} loading={loading} error={error} />\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AdminPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",["156","157"],"import React, {useEffect, useState} from \"react\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ControlPanel from \"./ControlPanel\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport CollectionsContainer from \"./CollectionsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction CollectionsPage() {\r\n    const ownerId = useParams().ownerId\r\n    const lang = useSelector(state => state.language)\r\n    const [collections, setCollections] = useState([])\r\n    const [owner, setOwner] = useState({})\r\n    const { request, loading, error } = useRequest()\r\n    async function loadUser() {\r\n        const data = await request(\r\n            \"/api/collections/getCollections\",\r\n            \"POST\",\r\n            { id: ownerId },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data) {\r\n            setCollections(data.collections)\r\n            setOwner(data.owner)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ownerId) loadUser().then()\r\n    }, [ownerId])\r\n\r\n    return (\r\n        <Container>\r\n            <ControlPanel owner={owner} loadCollections={loadUser} />\r\n            <span style={{ color: \"red\" }}>{error ? error : \"\"}</span>\r\n            {\r\n                !loading\r\n                ?\r\n                    <CollectionsContainer collections={collections} />\r\n                :\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CollectionsPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",["158"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\"\r\nimport Info from \"./Info\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport ItemsContainer from \"./ItemsContainer\";\r\n\r\nfunction CollectionPage() {\r\n    const [info, setInfo] = useState({})\r\n\r\n    const [items, setItems] = useState(null)\r\n    const [fields, setFields] = useState([])\r\n    const id = useParams().id\r\n    const { loading, error, request } = useRequest()\r\n\r\n    async function loadCollection() {\r\n        const data = await request(\r\n            \"/api/collections/getCollection\",\r\n            \"POST\",\r\n            {\r\n                id: id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setInfo({\r\n                name: data.collection.name,\r\n                id: data.collection._id,\r\n                description: data.collection.description,\r\n                theme: data.collection.theme,\r\n                ownerId: data.collection.ownerId,\r\n                ownerName: data.collection.ownerName,\r\n                img_id: data.collection.img_id,\r\n                img_format: data.collection.img_format\r\n            })\r\n            setFields(data.collection.advancedFields)\r\n            const items = await request(\r\n                \"/api/collections/getItems\",\r\n                \"POST\",\r\n                {\r\n                    id: data.collection._id\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (items && items.ok) {\r\n                setItems(items.items)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n            }\r\n        }\r\n        const edit = await request(\r\n            \"/api/collections/editCollection\",\r\n            \"POST\",\r\n            {\r\n                edit: fields,\r\n                token: localStorage.getItem(\"token\"),\r\n                id,\r\n                ownerId: info.ownerId\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (edit && edit.ok) {\r\n            loadCollection().then()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollection().then()\r\n    }, [])\r\n    return (\r\n        <Container fluid>\r\n            {\r\n                loading\r\n                ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                :\r\n                    <Col>\r\n                        <Info info={info} loadCollection={loadCollection} id={id} fields={fields} edit={edit} />\r\n                        <ItemsContainer items={items} size={2} />\r\n                    </Col>\r\n            }\r\n            <span>{error || \"\"}</span>\r\n        </Container>\r\n    )\r\n}\r\nexport default CollectionPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((e, i) => {\r\n                            if (e.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={e.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row, Form, Col, Button} from \"react-bootstrap\";\r\nimport Comment from \"./Comment\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Comments({ itemID }) {\r\n    const lang = useSelector(state => state.language)\r\n    const isAuth = useSelector(state => state.isAuthUser)\r\n    const theme = useSelector(state => state.theme)\r\n    const [comments, setComments] = useState([])\r\n    const [message, setMessage] = useState(\"\")\r\n    const { request } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (itemID) loadComments(true).then()\r\n    }, [itemID])\r\n\r\n\r\n\r\n    async function loadComments(bool) {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {\r\n                id: itemID\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            if (bool) {\r\n                const id = setTimeout(() => {}, 1)\r\n                for (let i = 0; i <= id; i++) clearInterval(i)\r\n                setInterval(loadComments, 3000)\r\n            }\r\n            setComments(data.item.comments)\r\n        }\r\n    }\r\n\r\n    async function send() {\r\n        const data = await request(\r\n            \"/api/items/createComment\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                itemId: itemID,\r\n                message\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setMessage(\"\")\r\n            loadComments().then()\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 px-3 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row className={\"w-100 justify-content-center\"}>\r\n                <h1>{languages[lang].comments}: </h1>\r\n            </Row>\r\n            {\r\n                comments.length <= 0 ?\r\n                    <Row className={\"w-100 justify-content-center mt-3\"}>\r\n                        <span style={{ color: \"#777171\"}}>{languages[lang].commentsMessage}</span>\r\n                    </Row> :\r\n                    comments.map((e, i) => {\r\n                        return <Comment key={i} username={e.username} userId={e.userId} message={e.message} />\r\n                    })\r\n            }\r\n            {\r\n                isAuth ?\r\n                    <Container>\r\n                        <Row className={\"mt-5 justify-content-center\"}>\r\n                            <Col md={7} xs={9}>\r\n                                <Form.Control\r\n                                    as={\"textarea\"}\r\n                                    rows={3}\r\n                                    value={message}\r\n                                    onChange={(e) => setMessage(e.target.value)}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={1} className={\"justify-content-center mt-3\"}>\r\n                                <Button variant={\"primary\"} className={\"my-auto\"} onClick={send}>{languages[lang].send}</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container> : []\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Comments","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nfunction LastItems() {\r\n    const [items, setItems] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadItems() {\r\n        const data = await request(\r\n            \"/api/collections/getAllItems\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            setItems(data.items.slice(data.items.length - 7 > 0 && data.items.length - 7))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItems().then()\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                loading && items\r\n                    ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <ItemsContainer items={items} size={3} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LastItems","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",["164"],"import React, {useEffect, useState} from \"react\"\r\nimport CollectionsContainer from \"../CollectionsPage/CollectionsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nfunction BiggestCollections() {\r\n    const [collections, setCollections] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadCollections() {\r\n        const data = await request (\r\n            \"/api/collections/getAllCollections\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            const biggestCollections = data.collections.sort((a, b) => {\r\n                return b.items > a.items ? 1 : -1\r\n            }).slice(0, data.collections.length >= 3 ? 3 : data.collections.length)\r\n            setCollections(biggestCollections)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollections().then()\r\n    }, [])\r\n    return (\r\n        <Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <CollectionsContainer collections={collections} />\r\n            }\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default BiggestCollections",{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":33,"column":8,"nodeType":"171","endLine":33,"endColumn":24,"suggestions":"172"},{"ruleId":"173","severity":1,"message":"174","line":18,"column":36,"nodeType":"175","messageId":"176","endLine":18,"endColumn":37},{"ruleId":"173","severity":1,"message":"174","line":42,"column":43,"nodeType":"175","messageId":"176","endLine":42,"endColumn":44},{"ruleId":"169","severity":1,"message":"177","line":21,"column":8,"nodeType":"171","endLine":21,"endColumn":10,"suggestions":"178"},{"ruleId":"173","severity":1,"message":"174","line":47,"column":43,"nodeType":"175","messageId":"176","endLine":47,"endColumn":44},{"ruleId":"169","severity":1,"message":"179","line":18,"column":8,"nodeType":"171","endLine":18,"endColumn":10,"suggestions":"180"},{"ruleId":"181","severity":1,"message":"182","line":12,"column":11,"nodeType":"183","messageId":"184","endLine":12,"endColumn":15},{"ruleId":"169","severity":1,"message":"185","line":33,"column":8,"nodeType":"171","endLine":33,"endColumn":17,"suggestions":"186"},{"ruleId":"169","severity":1,"message":"187","line":91,"column":8,"nodeType":"171","endLine":91,"endColumn":10,"suggestions":"188"},{"ruleId":"169","severity":1,"message":"189","line":21,"column":8,"nodeType":"171","endLine":21,"endColumn":16,"suggestions":"190"},{"ruleId":"169","severity":1,"message":"191","line":77,"column":8,"nodeType":"171","endLine":77,"endColumn":10,"suggestions":"192"},{"ruleId":"169","severity":1,"message":"193","line":18,"column":8,"nodeType":"171","endLine":18,"endColumn":16,"suggestions":"194"},{"ruleId":"169","severity":1,"message":"195","line":27,"column":8,"nodeType":"171","endLine":27,"endColumn":10,"suggestions":"196"},{"ruleId":"169","severity":1,"message":"197","line":23,"column":8,"nodeType":"171","endLine":23,"endColumn":10,"suggestions":"198"},{"ruleId":"169","severity":1,"message":"199","line":26,"column":8,"nodeType":"171","endLine":26,"endColumn":10,"suggestions":"200"},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["203"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["204"],"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["205"],"no-unused-vars","'lang' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["206"],"React Hook useEffect has a missing dependency: 'loadCollection'. Either include it or remove the dependency array.",["207"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["208"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["209"],"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",["210"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["211"],"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.",["212"],"React Hook useEffect has a missing dependency: 'loadCollections'. Either include it or remove the dependency array.",["213"],"no-global-assign","no-unsafe-negation",{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},"Update the dependencies array to be: [advancedFields, form]",{"range":"236","text":"237"},"Update the dependencies array to be: [login]",{"range":"238","text":"239"},"Update the dependencies array to be: [loadUsers]",{"range":"240","text":"241"},"Update the dependencies array to be: [loadUser, ownerId]",{"range":"242","text":"243"},"Update the dependencies array to be: [loadCollection]",{"range":"244","text":"245"},"Update the dependencies array to be: [fields, item]",{"range":"246","text":"247"},"Update the dependencies array to be: [loadItem]",{"range":"248","text":"249"},"Update the dependencies array to be: [itemID, loadComments]",{"range":"250","text":"251"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"252","text":"253"},"Update the dependencies array to be: [loadItems]",{"range":"254","text":"255"},"Update the dependencies array to be: [loadCollections]",{"range":"256","text":"257"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[564,566],"[loadUsers]",[1118,1127],"[loadUser, ownerId]",[2808,2810],"[loadCollection]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[713,721],"[itemID, loadComments]",[1068,1070],"[findItems, loadTags, text]",[729,731],"[loadItems]",[948,950],"[loadCollections]"]
>>>>>>> web.config
>>>>>>> web.config
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33"},{"size":317,"mtime":1609784996776,"results":"34","hashOfConfig":"35"},{"size":3826,"mtime":1611226146272,"results":"36","hashOfConfig":"35"},{"size":8194,"mtime":1611163703298,"results":"37","hashOfConfig":"38"},{"size":1116,"mtime":1609766071482,"results":"39","hashOfConfig":"38"},{"size":1013,"mtime":1611163900135,"results":"40","hashOfConfig":"38"},{"size":107,"mtime":1609510693737,"results":"41","hashOfConfig":"35"},{"size":1298,"mtime":1610484545110,"results":"42","hashOfConfig":"38"},{"size":2695,"mtime":1611158979614,"results":"43","hashOfConfig":"38"},{"size":8506,"mtime":1610819110079,"results":"44","hashOfConfig":"38"},{"size":1425,"mtime":1611158495529,"results":"45","hashOfConfig":"38"},{"size":1779,"mtime":1611158909489,"results":"46","hashOfConfig":"38"},{"size":3502,"mtime":1611164081458,"results":"47","hashOfConfig":"38"},{"size":4093,"mtime":1611164053301,"results":"48","hashOfConfig":"38"},{"size":804,"mtime":1610377267941,"results":"49","hashOfConfig":"38"},{"size":352,"mtime":1611159377405,"results":"50","hashOfConfig":"38"},{"size":1730,"mtime":1610487463887,"results":"51","hashOfConfig":"38"},{"size":3048,"mtime":1610720686457,"results":"52","hashOfConfig":"38"},{"size":2505,"mtime":1611159716133,"results":"53","hashOfConfig":"38"},{"size":1669,"mtime":1610410486549,"results":"54","hashOfConfig":"38"},{"size":3474,"mtime":1611156955409,"results":"55","hashOfConfig":"38"},{"size":10840,"mtime":1611159011217,"results":"56","hashOfConfig":"38"},{"size":5371,"mtime":1610724495124,"results":"57","hashOfConfig":"38"},{"size":1295,"mtime":1611158505900,"results":"58","hashOfConfig":"38"},{"size":2289,"mtime":1611158817485,"results":"59","hashOfConfig":"38"},{"size":2862,"mtime":1610484113652,"results":"60","hashOfConfig":"38"},{"size":8817,"mtime":1611159098057,"results":"61","hashOfConfig":"38"},{"size":5989,"mtime":1611159156914,"results":"62","hashOfConfig":"38"},{"size":4656,"mtime":1610819367290,"results":"63","hashOfConfig":"38"},{"size":3508,"mtime":1611159241128,"results":"64","hashOfConfig":"38"},{"size":440,"mtime":1610297150301,"results":"65","hashOfConfig":"38"},{"size":4812,"mtime":1611155410931,"results":"66","hashOfConfig":"38"},{"size":1192,"mtime":1611155623122,"results":"67","hashOfConfig":"38"},{"size":1399,"mtime":1611157845275,"results":"68","hashOfConfig":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13pbhkg",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"64clop",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"75"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"75"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"75"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"75"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"75"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"75"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"75"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"75"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"75"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"75"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"75"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"75"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],["149","150"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["151"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["152"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["153"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\"\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["154","155"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"http://localhost:3000\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",["156"],"import React, {useEffect, useState} from 'react'\r\nimport UsersTable from \"./UsersTable\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {Container} from \"react-bootstrap\";\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\nfunction AdminPage() {\r\n    const { loading, request, error } = useRequest()\r\n    const [userData, setUserData] = useState([])\r\n\r\n    async function loadUsers() {\r\n        const data = await request(\"/api/users/getUsers\")\r\n        if (data) setUserData(data.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadUsers().then()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ControlPanel load={loadUsers} />\r\n            <UsersTable usersData={userData} loading={loading} error={error} />\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AdminPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",["157","158"],"import React, {useEffect, useState} from \"react\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ControlPanel from \"./ControlPanel\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport CollectionsContainer from \"./CollectionsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction CollectionsPage() {\r\n    const ownerId = useParams().ownerId\r\n    const lang = useSelector(state => state.language)\r\n    const [collections, setCollections] = useState([])\r\n    const [owner, setOwner] = useState({})\r\n    const { request, loading, error } = useRequest()\r\n    async function loadUser() {\r\n        const data = await request(\r\n            \"/api/collections/getCollections\",\r\n            \"POST\",\r\n            { id: ownerId },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data) {\r\n            setCollections(data.collections)\r\n            setOwner(data.owner)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ownerId) loadUser().then()\r\n    }, [ownerId])\r\n\r\n    return (\r\n        <Container>\r\n            <ControlPanel owner={owner} loadCollections={loadUser} />\r\n            <span style={{ color: \"red\" }}>{error ? error : \"\"}</span>\r\n            {\r\n                !loading\r\n                ?\r\n                    <CollectionsContainer collections={collections} />\r\n                :\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CollectionsPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\"\r\nimport Info from \"./Info\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport ItemsContainer from \"./ItemsContainer\";\r\n\r\nfunction CollectionPage() {\r\n    const [info, setInfo] = useState({})\r\n\r\n    const [items, setItems] = useState(null)\r\n    const [fields, setFields] = useState([])\r\n    const id = useParams().id\r\n    const { loading, error, request } = useRequest()\r\n\r\n    async function loadCollection() {\r\n        const data = await request(\r\n            \"/api/collections/getCollection\",\r\n            \"POST\",\r\n            {\r\n                id: id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setInfo({\r\n                name: data.collection.name,\r\n                id: data.collection._id,\r\n                description: data.collection.description,\r\n                theme: data.collection.theme,\r\n                ownerId: data.collection.ownerId,\r\n                ownerName: data.collection.ownerName,\r\n                img_id: data.collection.img_id,\r\n                img_format: data.collection.img_format\r\n            })\r\n            setFields(data.collection.advancedFields)\r\n            const items = await request(\r\n                \"/api/collections/getItems\",\r\n                \"POST\",\r\n                {\r\n                    id: data.collection._id\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (items && items.ok) {\r\n                setItems(items.items)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n            }\r\n        }\r\n        const edit = await request(\r\n            \"/api/collections/editCollection\",\r\n            \"POST\",\r\n            {\r\n                edit: fields,\r\n                token: localStorage.getItem(\"token\"),\r\n                id,\r\n                ownerId: info.ownerId\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (edit && edit.ok) {\r\n            loadCollection().then()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollection().then()\r\n    }, [])\r\n    return (\r\n        <Container fluid>\r\n            {\r\n                loading\r\n                ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                :\r\n                    <Col>\r\n                        <Info info={info} loadCollection={loadCollection} id={id} fields={fields} edit={edit} />\r\n                        <ItemsContainer items={items} size={2} />\r\n                    </Col>\r\n            }\r\n            <span>{error || \"\"}</span>\r\n        </Container>\r\n    )\r\n}\r\nexport default CollectionPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((e, i) => {\r\n                            if (e.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={e.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row, Form, Col, Button} from \"react-bootstrap\";\r\nimport Comment from \"./Comment\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Comments({ itemID }) {\r\n    const lang = useSelector(state => state.language)\r\n    const isAuth = useSelector(state => state.isAuthUser)\r\n    const theme = useSelector(state => state.theme)\r\n    const [comments, setComments] = useState([])\r\n    const [message, setMessage] = useState(\"\")\r\n    const { request } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (itemID) loadComments(true).then()\r\n    }, [itemID])\r\n\r\n\r\n\r\n    async function loadComments(bool) {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {\r\n                id: itemID\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            if (bool) {\r\n                const id = setTimeout(() => {}, 1)\r\n                for (let i = 0; i <= id; i++) clearInterval(i)\r\n                setInterval(loadComments, 3000)\r\n            }\r\n            setComments(data.item.comments)\r\n        }\r\n    }\r\n\r\n    async function send() {\r\n        const data = await request(\r\n            \"/api/items/createComment\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                itemId: itemID,\r\n                message\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setMessage(\"\")\r\n            loadComments().then()\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 px-3 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row className={\"w-100 justify-content-center\"}>\r\n                <h1>{languages[lang].comments}: </h1>\r\n            </Row>\r\n            {\r\n                comments.length <= 0 ?\r\n                    <Row className={\"w-100 justify-content-center mt-3\"}>\r\n                        <span style={{ color: \"#777171\"}}>{languages[lang].commentsMessage}</span>\r\n                    </Row> :\r\n                    comments.map((e, i) => {\r\n                        return <Comment key={i} username={e.username} userId={e.userId} message={e.message} />\r\n                    })\r\n            }\r\n            {\r\n                isAuth ?\r\n                    <Container>\r\n                        <Row className={\"mt-5 justify-content-center\"}>\r\n                            <Col md={7} xs={9}>\r\n                                <Form.Control\r\n                                    as={\"textarea\"}\r\n                                    rows={3}\r\n                                    value={message}\r\n                                    onChange={(e) => setMessage(e.target.value)}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={1} className={\"justify-content-center mt-3\"}>\r\n                                <Button variant={\"primary\"} className={\"my-auto\"} onClick={send}>{languages[lang].send}</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container> : []\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Comments","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",["164"],"import React, {useEffect, useState} from \"react\"\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nfunction LastItems() {\r\n    const [items, setItems] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadItems() {\r\n        const data = await request(\r\n            \"/api/collections/getAllItems\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            setItems(data.items.slice(data.items.length - 7 > 0 && data.items.length - 7))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItems().then()\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                loading && items\r\n                    ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <ItemsContainer items={items} size={3} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LastItems","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",["165"],"import React, {useEffect, useState} from \"react\"\r\nimport CollectionsContainer from \"../CollectionsPage/CollectionsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nfunction BiggestCollections() {\r\n    const [collections, setCollections] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadCollections() {\r\n        const data = await request (\r\n            \"/api/collections/getAllCollections\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            const biggestCollections = data.collections.sort((a, b) => {\r\n                return b.items > a.items ? 1 : -1\r\n            }).slice(0, data.collections.length >= 3 ? 3 : data.collections.length)\r\n            setCollections(biggestCollections)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollections().then()\r\n    }, [])\r\n    return (\r\n        <Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <CollectionsContainer collections={collections} />\r\n            }\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default BiggestCollections",{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":33,"column":8,"nodeType":"172","endLine":33,"endColumn":24,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":18,"column":36,"nodeType":"176","messageId":"177","endLine":18,"endColumn":37},{"ruleId":"174","severity":1,"message":"175","line":42,"column":43,"nodeType":"176","messageId":"177","endLine":42,"endColumn":44},{"ruleId":"170","severity":1,"message":"178","line":21,"column":8,"nodeType":"172","endLine":21,"endColumn":10,"suggestions":"179"},{"ruleId":"174","severity":1,"message":"175","line":47,"column":43,"nodeType":"176","messageId":"177","endLine":47,"endColumn":44},{"ruleId":"170","severity":1,"message":"180","line":18,"column":8,"nodeType":"172","endLine":18,"endColumn":10,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":12,"column":11,"nodeType":"184","messageId":"185","endLine":12,"endColumn":15},{"ruleId":"170","severity":1,"message":"186","line":33,"column":8,"nodeType":"172","endLine":33,"endColumn":17,"suggestions":"187"},{"ruleId":"170","severity":1,"message":"188","line":91,"column":8,"nodeType":"172","endLine":91,"endColumn":10,"suggestions":"189"},{"ruleId":"170","severity":1,"message":"190","line":21,"column":8,"nodeType":"172","endLine":21,"endColumn":16,"suggestions":"191"},{"ruleId":"170","severity":1,"message":"192","line":77,"column":8,"nodeType":"172","endLine":77,"endColumn":10,"suggestions":"193"},{"ruleId":"170","severity":1,"message":"194","line":18,"column":8,"nodeType":"172","endLine":18,"endColumn":16,"suggestions":"195"},{"ruleId":"170","severity":1,"message":"196","line":27,"column":8,"nodeType":"172","endLine":27,"endColumn":10,"suggestions":"197"},{"ruleId":"170","severity":1,"message":"198","line":23,"column":8,"nodeType":"172","endLine":23,"endColumn":10,"suggestions":"199"},{"ruleId":"170","severity":1,"message":"200","line":26,"column":8,"nodeType":"172","endLine":26,"endColumn":10,"suggestions":"201"},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["204"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["205"],"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["206"],"no-unused-vars","'lang' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["207"],"React Hook useEffect has a missing dependency: 'loadCollection'. Either include it or remove the dependency array.",["208"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["209"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["210"],"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",["211"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["212"],"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.",["213"],"React Hook useEffect has a missing dependency: 'loadCollections'. Either include it or remove the dependency array.",["214"],"no-global-assign","no-unsafe-negation",{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},"Update the dependencies array to be: [advancedFields, form]",{"range":"237","text":"238"},"Update the dependencies array to be: [login]",{"range":"239","text":"240"},"Update the dependencies array to be: [loadUsers]",{"range":"241","text":"242"},"Update the dependencies array to be: [loadUser, ownerId]",{"range":"243","text":"244"},"Update the dependencies array to be: [loadCollection]",{"range":"245","text":"246"},"Update the dependencies array to be: [fields, item]",{"range":"247","text":"248"},"Update the dependencies array to be: [loadItem]",{"range":"249","text":"250"},"Update the dependencies array to be: [itemID, loadComments]",{"range":"251","text":"252"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"253","text":"254"},"Update the dependencies array to be: [loadItems]",{"range":"255","text":"256"},"Update the dependencies array to be: [loadCollections]",{"range":"257","text":"258"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[564,566],"[loadUsers]",[1118,1127],"[loadUser, ownerId]",[2808,2810],"[loadCollection]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[713,721],"[itemID, loadComments]",[1068,1070],"[findItems, loadTags, text]",[729,731],"[loadItems]",[948,950],"[loadCollections]"]
>>>>>>> a
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> a
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33"},{"size":317,"mtime":1609784996776,"results":"34","hashOfConfig":"35"},{"size":3826,"mtime":1611226146272,"results":"36","hashOfConfig":"35"},{"size":8194,"mtime":1611163703298,"results":"37","hashOfConfig":"35"},{"size":1116,"mtime":1609766071482,"results":"38","hashOfConfig":"35"},{"size":1013,"mtime":1611163900135,"results":"39","hashOfConfig":"35"},{"size":107,"mtime":1609510693737,"results":"40","hashOfConfig":"35"},{"size":1298,"mtime":1610484545110,"results":"41","hashOfConfig":"35"},{"size":2695,"mtime":1611158979614,"results":"42","hashOfConfig":"35"},{"size":8506,"mtime":1610819110079,"results":"43","hashOfConfig":"35"},{"size":1425,"mtime":1611158495529,"results":"44","hashOfConfig":"35"},{"size":1792,"mtime":1611345599079,"results":"45","hashOfConfig":"35"},{"size":3502,"mtime":1611164081458,"results":"46","hashOfConfig":"35"},{"size":4093,"mtime":1611164053301,"results":"47","hashOfConfig":"35"},{"size":804,"mtime":1610377267941,"results":"48","hashOfConfig":"35"},{"size":352,"mtime":1611159377405,"results":"49","hashOfConfig":"35"},{"size":1730,"mtime":1610487463887,"results":"50","hashOfConfig":"35"},{"size":3048,"mtime":1610720686457,"results":"51","hashOfConfig":"35"},{"size":2505,"mtime":1611159716133,"results":"52","hashOfConfig":"35"},{"size":1669,"mtime":1610410486549,"results":"53","hashOfConfig":"35"},{"size":3474,"mtime":1611156955409,"results":"54","hashOfConfig":"35"},{"size":10840,"mtime":1611159011217,"results":"55","hashOfConfig":"35"},{"size":5371,"mtime":1610724495124,"results":"56","hashOfConfig":"35"},{"size":1295,"mtime":1611158505900,"results":"57","hashOfConfig":"35"},{"size":2455,"mtime":1611345900817,"results":"58","hashOfConfig":"35"},{"size":2862,"mtime":1610484113652,"results":"59","hashOfConfig":"35"},{"size":8908,"mtime":1611345194602,"results":"60","hashOfConfig":"35"},{"size":5989,"mtime":1611159156914,"results":"61","hashOfConfig":"35"},{"size":4656,"mtime":1610819367290,"results":"62","hashOfConfig":"35"},{"size":3508,"mtime":1611159241128,"results":"63","hashOfConfig":"35"},{"size":440,"mtime":1610297150301,"results":"64","hashOfConfig":"35"},{"size":4812,"mtime":1611155410931,"results":"65","hashOfConfig":"35"},{"size":1192,"mtime":1611155623122,"results":"66","hashOfConfig":"35"},{"size":1399,"mtime":1611157845275,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"13pbhkg",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"70"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["148","149"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["150"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["151"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["152"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\"\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["153","154"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"http://localhost:3000\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",["155"],"import React, {useEffect, useState} from 'react'\r\nimport UsersTable from \"./UsersTable\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {Container} from \"react-bootstrap\";\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\nfunction AdminPage() {\r\n    const { loading, request, error } = useRequest()\r\n    const [userData, setUserData] = useState([])\r\n\r\n    async function loadUsers() {\r\n        const data = await request(\"/api/users/getUsers\")\r\n        if (data) setUserData(data.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadUsers().then()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ControlPanel load={loadUsers} />\r\n            <UsersTable usersData={userData} loading={loading} error={error} />\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AdminPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",["156","157"],"import React, {useEffect, useState} from \"react\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ControlPanel from \"./ControlPanel\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport CollectionsContainer from \"./CollectionsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction CollectionsPage() {\r\n    const ownerId = useParams().ownerId\r\n    const lang = useSelector(state => state.language)\r\n    const [collections, setCollections] = useState([])\r\n    const [owner, setOwner] = useState({})\r\n    const { request, loading, error } = useRequest()\r\n    async function loadUser() {\r\n        const data = await request(\r\n            \"/api/collections/getCollections\",\r\n            \"POST\",\r\n            { id: ownerId },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data) {\r\n            setCollections(data.collections)\r\n            setOwner(data.owner)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ownerId) loadUser().then()\r\n    }, [ownerId])\r\n\r\n    return (\r\n        <Container>\r\n            <ControlPanel owner={owner} loadCollections={loadUser} />\r\n            <span style={{ color: \"red\" }}>{error ? error : \"\"}</span>\r\n            {\r\n                !loading\r\n                ?\r\n                    <CollectionsContainer collections={collections} />\r\n                :\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CollectionsPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",["158"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\"\r\nimport Info from \"./Info\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport ItemsContainer from \"./ItemsContainer\";\r\n\r\nfunction CollectionPage() {\r\n    const [info, setInfo] = useState({})\r\n\r\n    const [items, setItems] = useState(null)\r\n    const [fields, setFields] = useState([])\r\n    const id = useParams().id\r\n    const { loading, error, request } = useRequest()\r\n\r\n    async function loadCollection() {\r\n        const data = await request(\r\n            \"/api/collections/getCollection\",\r\n            \"POST\",\r\n            {\r\n                id: id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setInfo({\r\n                name: data.collection.name,\r\n                id: data.collection._id,\r\n                description: data.collection.description,\r\n                theme: data.collection.theme,\r\n                ownerId: data.collection.ownerId,\r\n                ownerName: data.collection.ownerName,\r\n                img_id: data.collection.img_id,\r\n                img_format: data.collection.img_format\r\n            })\r\n            setFields(data.collection.advancedFields)\r\n            const items = await request(\r\n                \"/api/collections/getItems\",\r\n                \"POST\",\r\n                {\r\n                    id: data.collection._id\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (items && items.ok) {\r\n                setItems(items.items)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n            }\r\n        }\r\n        const edit = await request(\r\n            \"/api/collections/editCollection\",\r\n            \"POST\",\r\n            {\r\n                edit: fields,\r\n                token: localStorage.getItem(\"token\"),\r\n                id,\r\n                ownerId: info.ownerId\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (edit && edit.ok) {\r\n            loadCollection().then()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollection().then()\r\n    }, [])\r\n    return (\r\n        <Container fluid>\r\n            {\r\n                loading\r\n                ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                :\r\n                    <Col>\r\n                        <Info info={info} loadCollection={loadCollection} id={id} fields={fields} edit={edit} />\r\n                        <ItemsContainer items={items} size={2} />\r\n                    </Col>\r\n            }\r\n            <span>{error || \"\"}</span>\r\n        </Container>\r\n    )\r\n}\r\nexport default CollectionPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((e, i) => {\r\n                            if (e.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={e.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["161"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row, Form, Col, Button} from \"react-bootstrap\";\r\nimport Comment from \"./Comment\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Comments({ itemID }) {\r\n    const lang = useSelector(state => state.language)\r\n    const isAuth = useSelector(state => state.isAuthUser)\r\n    const theme = useSelector(state => state.theme)\r\n    const [comments, setComments] = useState([])\r\n    const [message, setMessage] = useState(\"\")\r\n    const { request } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (itemID) loadComments(true).then()\r\n    }, [itemID])\r\n\r\n\r\n\r\n    async function loadComments(bool) {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {\r\n                id: itemID\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            if (bool) {\r\n                const id = setTimeout(() => {}, 1)\r\n                for (let i = 0; i <= id; i++) clearInterval(i)\r\n                setInterval(loadComments, 3000)\r\n            }\r\n            setComments(data.item.comments)\r\n        }\r\n    }\r\n\r\n    async function send() {\r\n        const data = await request(\r\n            \"/api/items/createComment\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                itemId: itemID,\r\n                message\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setMessage(\"\")\r\n            loadComments().then()\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 px-3 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row className={\"w-100 justify-content-center\"}>\r\n                <h1>{languages[lang].comments}: </h1>\r\n            </Row>\r\n            {\r\n                comments.length <= 0 ?\r\n                    <Row className={\"w-100 justify-content-center mt-3\"}>\r\n                        <span style={{ color: \"#777171\"}}>{languages[lang].commentsMessage}</span>\r\n                    </Row> :\r\n                    comments.map((e, i) => {\r\n                        return <Comment key={i} username={e.username} userId={e.userId} message={e.message} />\r\n                    })\r\n            }\r\n            {\r\n                isAuth ?\r\n                    <Container>\r\n                        <Row className={\"mt-5 justify-content-center\"}>\r\n                            <Col md={7} xs={9}>\r\n                                <Form.Control\r\n                                    as={\"textarea\"}\r\n                                    rows={3}\r\n                                    value={message}\r\n                                    onChange={(e) => setMessage(e.target.value)}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={1} className={\"justify-content-center mt-3\"}>\r\n                                <Button variant={\"primary\"} className={\"my-auto\"} onClick={send}>{languages[lang].send}</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container> : []\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Comments","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",["164"],"import React, {useEffect, useState} from \"react\"\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nfunction LastItems() {\r\n    const [items, setItems] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadItems() {\r\n        const data = await request(\r\n            \"/api/collections/getAllItems\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            setItems(data.items.slice(data.items.length - 7 > 0 && data.items.length - 7))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItems().then()\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                loading && items\r\n                    ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <ItemsContainer items={items} size={3} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LastItems","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",["165"],"import React, {useEffect, useState} from \"react\"\r\nimport CollectionsContainer from \"../CollectionsPage/CollectionsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nfunction BiggestCollections() {\r\n    const [collections, setCollections] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadCollections() {\r\n        const data = await request (\r\n            \"/api/collections/getAllCollections\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            const biggestCollections = data.collections.sort((a, b) => {\r\n                return b.items > a.items ? 1 : -1\r\n            }).slice(0, data.collections.length >= 3 ? 3 : data.collections.length)\r\n            setCollections(biggestCollections)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollections().then()\r\n    }, [])\r\n    return (\r\n        <Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <CollectionsContainer collections={collections} />\r\n            }\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default BiggestCollections",{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":33,"column":8,"nodeType":"172","endLine":33,"endColumn":24,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":18,"column":36,"nodeType":"176","messageId":"177","endLine":18,"endColumn":37},{"ruleId":"174","severity":1,"message":"175","line":42,"column":43,"nodeType":"176","messageId":"177","endLine":42,"endColumn":44},{"ruleId":"170","severity":1,"message":"178","line":21,"column":8,"nodeType":"172","endLine":21,"endColumn":10,"suggestions":"179"},{"ruleId":"174","severity":1,"message":"175","line":47,"column":43,"nodeType":"176","messageId":"177","endLine":47,"endColumn":44},{"ruleId":"170","severity":1,"message":"180","line":18,"column":8,"nodeType":"172","endLine":18,"endColumn":10,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":12,"column":11,"nodeType":"184","messageId":"185","endLine":12,"endColumn":15},{"ruleId":"170","severity":1,"message":"186","line":33,"column":8,"nodeType":"172","endLine":33,"endColumn":17,"suggestions":"187"},{"ruleId":"170","severity":1,"message":"188","line":91,"column":8,"nodeType":"172","endLine":91,"endColumn":10,"suggestions":"189"},{"ruleId":"170","severity":1,"message":"190","line":21,"column":8,"nodeType":"172","endLine":21,"endColumn":16,"suggestions":"191"},{"ruleId":"170","severity":1,"message":"192","line":77,"column":8,"nodeType":"172","endLine":77,"endColumn":10,"suggestions":"193"},{"ruleId":"170","severity":1,"message":"194","line":31,"column":8,"nodeType":"172","endLine":31,"endColumn":22,"suggestions":"195"},{"ruleId":"170","severity":1,"message":"196","line":18,"column":8,"nodeType":"172","endLine":18,"endColumn":16,"suggestions":"197"},{"ruleId":"170","severity":1,"message":"198","line":27,"column":8,"nodeType":"172","endLine":27,"endColumn":10,"suggestions":"199"},{"ruleId":"170","severity":1,"message":"200","line":23,"column":8,"nodeType":"172","endLine":23,"endColumn":10,"suggestions":"201"},{"ruleId":"170","severity":1,"message":"202","line":26,"column":8,"nodeType":"172","endLine":26,"endColumn":10,"suggestions":"203"},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["206"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["207"],"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["208"],"no-unused-vars","'lang' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["209"],"React Hook useEffect has a missing dependency: 'loadCollection'. Either include it or remove the dependency array.",["210"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["211"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["212"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["213"],"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",["214"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["215"],"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.",["216"],"React Hook useEffect has a missing dependency: 'loadCollections'. Either include it or remove the dependency array.",["217"],"no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},"Update the dependencies array to be: [advancedFields, form]",{"range":"242","text":"243"},"Update the dependencies array to be: [login]",{"range":"244","text":"245"},"Update the dependencies array to be: [loadUsers]",{"range":"246","text":"247"},"Update the dependencies array to be: [loadUser, ownerId]",{"range":"248","text":"249"},"Update the dependencies array to be: [loadCollection]",{"range":"250","text":"251"},"Update the dependencies array to be: [fields, item]",{"range":"252","text":"253"},"Update the dependencies array to be: [loadItem]",{"range":"254","text":"255"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"256","text":"257"},"Update the dependencies array to be: [itemID, loadComments]",{"range":"258","text":"259"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"260","text":"261"},"Update the dependencies array to be: [loadItems]",{"range":"262","text":"263"},"Update the dependencies array to be: [loadCollections]",{"range":"264","text":"265"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[564,566],"[loadUsers]",[1118,1127],"[loadUser, ownerId]",[2808,2810],"[loadCollection]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[713,721],"[itemID, loadComments]",[1068,1070],"[findItems, loadTags, text]",[729,731],"[loadItems]",[948,950],"[loadCollections]"]
>>>>>>> search+likes+eng
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> search+likes+eng
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> search+likes+eng
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33"},{"size":317,"mtime":1609784996776,"results":"34","hashOfConfig":"35"},{"size":3826,"mtime":1611226146272,"results":"36","hashOfConfig":"35"},{"size":8194,"mtime":1611163703298,"results":"37","hashOfConfig":"35"},{"size":1116,"mtime":1609766071482,"results":"38","hashOfConfig":"35"},{"size":1013,"mtime":1611163900135,"results":"39","hashOfConfig":"35"},{"size":107,"mtime":1609510693737,"results":"40","hashOfConfig":"35"},{"size":1298,"mtime":1610484545110,"results":"41","hashOfConfig":"35"},{"size":2695,"mtime":1611158979614,"results":"42","hashOfConfig":"35"},{"size":8506,"mtime":1610819110079,"results":"43","hashOfConfig":"35"},{"size":1425,"mtime":1611158495529,"results":"44","hashOfConfig":"35"},{"size":1792,"mtime":1611345599079,"results":"45","hashOfConfig":"35"},{"size":3502,"mtime":1611164081458,"results":"46","hashOfConfig":"35"},{"size":4107,"mtime":1611363106110,"results":"47","hashOfConfig":"35"},{"size":804,"mtime":1610377267941,"results":"48","hashOfConfig":"35"},{"size":352,"mtime":1611159377405,"results":"49","hashOfConfig":"35"},{"size":1730,"mtime":1610487463887,"results":"50","hashOfConfig":"35"},{"size":3048,"mtime":1610720686457,"results":"51","hashOfConfig":"35"},{"size":2505,"mtime":1611159716133,"results":"52","hashOfConfig":"35"},{"size":1669,"mtime":1610410486549,"results":"53","hashOfConfig":"35"},{"size":3474,"mtime":1611156955409,"results":"54","hashOfConfig":"35"},{"size":10840,"mtime":1611159011217,"results":"55","hashOfConfig":"35"},{"size":5371,"mtime":1610724495124,"results":"56","hashOfConfig":"35"},{"size":1295,"mtime":1611158505900,"results":"57","hashOfConfig":"35"},{"size":2455,"mtime":1611345900817,"results":"58","hashOfConfig":"35"},{"size":2862,"mtime":1610484113652,"results":"59","hashOfConfig":"35"},{"size":8908,"mtime":1611345194602,"results":"60","hashOfConfig":"35"},{"size":5989,"mtime":1611159156914,"results":"61","hashOfConfig":"35"},{"size":4656,"mtime":1610819367290,"results":"62","hashOfConfig":"35"},{"size":3508,"mtime":1611159241128,"results":"63","hashOfConfig":"35"},{"size":440,"mtime":1610297150301,"results":"64","hashOfConfig":"35"},{"size":4812,"mtime":1611155410931,"results":"65","hashOfConfig":"35"},{"size":1192,"mtime":1611155623122,"results":"66","hashOfConfig":"35"},{"size":1399,"mtime":1611157845275,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"13pbhkg",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"70"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["148","149"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["150"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["151"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["152"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\"\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["153","154"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",["155"],"import React, {useEffect, useState} from 'react'\r\nimport UsersTable from \"./UsersTable\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {Container} from \"react-bootstrap\";\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\nfunction AdminPage() {\r\n    const { loading, request, error } = useRequest()\r\n    const [userData, setUserData] = useState([])\r\n\r\n    async function loadUsers() {\r\n        const data = await request(\"/api/users/getUsers\")\r\n        if (data) setUserData(data.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadUsers().then()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ControlPanel load={loadUsers} />\r\n            <UsersTable usersData={userData} loading={loading} error={error} />\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AdminPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",["156","157"],"import React, {useEffect, useState} from \"react\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ControlPanel from \"./ControlPanel\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport CollectionsContainer from \"./CollectionsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction CollectionsPage() {\r\n    const ownerId = useParams().ownerId\r\n    const lang = useSelector(state => state.language)\r\n    const [collections, setCollections] = useState([])\r\n    const [owner, setOwner] = useState({})\r\n    const { request, loading, error } = useRequest()\r\n    async function loadUser() {\r\n        const data = await request(\r\n            \"/api/collections/getCollections\",\r\n            \"POST\",\r\n            { id: ownerId },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data) {\r\n            setCollections(data.collections)\r\n            setOwner(data.owner)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ownerId) loadUser().then()\r\n    }, [ownerId])\r\n\r\n    return (\r\n        <Container>\r\n            <ControlPanel owner={owner} loadCollections={loadUser} />\r\n            <span style={{ color: \"red\" }}>{error ? error : \"\"}</span>\r\n            {\r\n                !loading\r\n                ?\r\n                    <CollectionsContainer collections={collections} />\r\n                :\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CollectionsPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",["158"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\"\r\nimport Info from \"./Info\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport ItemsContainer from \"./ItemsContainer\";\r\n\r\nfunction CollectionPage() {\r\n    const [info, setInfo] = useState({})\r\n\r\n    const [items, setItems] = useState(null)\r\n    const [fields, setFields] = useState([])\r\n    const id = useParams().id\r\n    const { loading, error, request } = useRequest()\r\n\r\n    async function loadCollection() {\r\n        const data = await request(\r\n            \"/api/collections/getCollection\",\r\n            \"POST\",\r\n            {\r\n                id: id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setInfo({\r\n                name: data.collection.name,\r\n                id: data.collection._id,\r\n                description: data.collection.description,\r\n                theme: data.collection.theme,\r\n                ownerId: data.collection.ownerId,\r\n                ownerName: data.collection.ownerName,\r\n                img_id: data.collection.img_id,\r\n                img_format: data.collection.img_format\r\n            })\r\n            setFields(data.collection.advancedFields)\r\n            const items = await request(\r\n                \"/api/collections/getItems\",\r\n                \"POST\",\r\n                {\r\n                    id: data.collection._id\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (items && items.ok) {\r\n                setItems(items.items)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n            }\r\n        }\r\n        const edit = await request(\r\n            \"/api/collections/editCollection\",\r\n            \"POST\",\r\n            {\r\n                edit: fields,\r\n                token: localStorage.getItem(\"token\"),\r\n                id,\r\n                ownerId: info.ownerId\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (edit && edit.ok) {\r\n            loadCollection().then()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollection().then()\r\n    }, [])\r\n    return (\r\n        <Container fluid>\r\n            {\r\n                loading\r\n                ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                :\r\n                    <Col>\r\n                        <Info info={info} loadCollection={loadCollection} id={id} fields={fields} edit={edit} />\r\n                        <ItemsContainer items={items} size={2} />\r\n                    </Col>\r\n            }\r\n            <span>{error || \"\"}</span>\r\n        </Container>\r\n    )\r\n}\r\nexport default CollectionPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((e, i) => {\r\n                            if (e.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={e.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col className={\"text-center text-md-left px-lg-2 px-0 mr-3 mr-lg-0\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row, Form, Col, Button} from \"react-bootstrap\";\r\nimport Comment from \"./Comment\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Comments({ itemID }) {\r\n    const lang = useSelector(state => state.language)\r\n    const isAuth = useSelector(state => state.isAuthUser)\r\n    const theme = useSelector(state => state.theme)\r\n    const [comments, setComments] = useState([])\r\n    const [message, setMessage] = useState(\"\")\r\n    const { request } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (itemID) loadComments(true).then()\r\n    }, [itemID])\r\n\r\n\r\n\r\n    async function loadComments(bool) {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {\r\n                id: itemID\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            if (bool) {\r\n                const id = setTimeout(() => {}, 1)\r\n                for (let i = 0; i <= id; i++) clearInterval(i)\r\n                setInterval(loadComments, 3000)\r\n            }\r\n            setComments(data.item.comments)\r\n        }\r\n    }\r\n\r\n    async function send() {\r\n        const data = await request(\r\n            \"/api/items/createComment\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                itemId: itemID,\r\n                message\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setMessage(\"\")\r\n            loadComments().then()\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 px-3 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row className={\"w-100 justify-content-center\"}>\r\n                <h1>{languages[lang].comments}: </h1>\r\n            </Row>\r\n            {\r\n                comments.length <= 0 ?\r\n                    <Row className={\"w-100 justify-content-center mt-3\"}>\r\n                        <span style={{ color: \"#777171\"}}>{languages[lang].commentsMessage}</span>\r\n                    </Row> :\r\n                    comments.map((e, i) => {\r\n                        return <Comment key={i} username={e.username} userId={e.userId} message={e.message} />\r\n                    })\r\n            }\r\n            {\r\n                isAuth ?\r\n                    <Container>\r\n                        <Row className={\"mt-5 justify-content-center\"}>\r\n                            <Col md={7} xs={9}>\r\n                                <Form.Control\r\n                                    as={\"textarea\"}\r\n                                    rows={3}\r\n                                    value={message}\r\n                                    onChange={(e) => setMessage(e.target.value)}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={1} className={\"justify-content-center mt-3\"}>\r\n                                <Button variant={\"primary\"} className={\"my-auto\"} onClick={send}>{languages[lang].send}</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container> : []\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Comments","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",["164"],"import React, {useEffect, useState} from \"react\"\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nfunction LastItems() {\r\n    const [items, setItems] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadItems() {\r\n        const data = await request(\r\n            \"/api/collections/getAllItems\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            setItems(data.items.slice(data.items.length - 7 > 0 && data.items.length - 7))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItems().then()\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                loading && items\r\n                    ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <ItemsContainer items={items} size={3} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LastItems","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",["165"],"import React, {useEffect, useState} from \"react\"\r\nimport CollectionsContainer from \"../CollectionsPage/CollectionsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nfunction BiggestCollections() {\r\n    const [collections, setCollections] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadCollections() {\r\n        const data = await request (\r\n            \"/api/collections/getAllCollections\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            const biggestCollections = data.collections.sort((a, b) => {\r\n                return b.items > a.items ? 1 : -1\r\n            }).slice(0, data.collections.length >= 3 ? 3 : data.collections.length)\r\n            setCollections(biggestCollections)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollections().then()\r\n    }, [])\r\n    return (\r\n        <Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <CollectionsContainer collections={collections} />\r\n            }\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default BiggestCollections",{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":33,"column":8,"nodeType":"172","endLine":33,"endColumn":24,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":18,"column":36,"nodeType":"176","messageId":"177","endLine":18,"endColumn":37},{"ruleId":"174","severity":1,"message":"175","line":42,"column":43,"nodeType":"176","messageId":"177","endLine":42,"endColumn":44},{"ruleId":"170","severity":1,"message":"178","line":21,"column":8,"nodeType":"172","endLine":21,"endColumn":10,"suggestions":"179"},{"ruleId":"174","severity":1,"message":"175","line":47,"column":43,"nodeType":"176","messageId":"177","endLine":47,"endColumn":44},{"ruleId":"170","severity":1,"message":"180","line":18,"column":8,"nodeType":"172","endLine":18,"endColumn":10,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":12,"column":11,"nodeType":"184","messageId":"185","endLine":12,"endColumn":15},{"ruleId":"170","severity":1,"message":"186","line":33,"column":8,"nodeType":"172","endLine":33,"endColumn":17,"suggestions":"187"},{"ruleId":"170","severity":1,"message":"188","line":91,"column":8,"nodeType":"172","endLine":91,"endColumn":10,"suggestions":"189"},{"ruleId":"170","severity":1,"message":"190","line":21,"column":8,"nodeType":"172","endLine":21,"endColumn":16,"suggestions":"191"},{"ruleId":"170","severity":1,"message":"192","line":77,"column":8,"nodeType":"172","endLine":77,"endColumn":10,"suggestions":"193"},{"ruleId":"170","severity":1,"message":"194","line":31,"column":8,"nodeType":"172","endLine":31,"endColumn":22,"suggestions":"195"},{"ruleId":"170","severity":1,"message":"196","line":18,"column":8,"nodeType":"172","endLine":18,"endColumn":16,"suggestions":"197"},{"ruleId":"170","severity":1,"message":"198","line":27,"column":8,"nodeType":"172","endLine":27,"endColumn":10,"suggestions":"199"},{"ruleId":"170","severity":1,"message":"200","line":23,"column":8,"nodeType":"172","endLine":23,"endColumn":10,"suggestions":"201"},{"ruleId":"170","severity":1,"message":"202","line":26,"column":8,"nodeType":"172","endLine":26,"endColumn":10,"suggestions":"203"},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["206"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["207"],"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["208"],"no-unused-vars","'lang' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["209"],"React Hook useEffect has a missing dependency: 'loadCollection'. Either include it or remove the dependency array.",["210"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["211"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["212"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["213"],"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",["214"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["215"],"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.",["216"],"React Hook useEffect has a missing dependency: 'loadCollections'. Either include it or remove the dependency array.",["217"],"no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},"Update the dependencies array to be: [advancedFields, form]",{"range":"242","text":"243"},"Update the dependencies array to be: [login]",{"range":"244","text":"245"},"Update the dependencies array to be: [loadUsers]",{"range":"246","text":"247"},"Update the dependencies array to be: [loadUser, ownerId]",{"range":"248","text":"249"},"Update the dependencies array to be: [loadCollection]",{"range":"250","text":"251"},"Update the dependencies array to be: [fields, item]",{"range":"252","text":"253"},"Update the dependencies array to be: [loadItem]",{"range":"254","text":"255"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"256","text":"257"},"Update the dependencies array to be: [itemID, loadComments]",{"range":"258","text":"259"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"260","text":"261"},"Update the dependencies array to be: [loadItems]",{"range":"262","text":"263"},"Update the dependencies array to be: [loadCollections]",{"range":"264","text":"265"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[564,566],"[loadUsers]",[1118,1127],"[loadUser, ownerId]",[2808,2810],"[loadCollection]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[713,721],"[itemID, loadComments]",[1068,1070],"[findItems, loadTags, text]",[729,731],"[loadItems]",[948,950],"[loadCollections]"]
>>>>>>> redirect-uri-google
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> redirect-uri-google
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> redirect-uri-google
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8247,"mtime":1611521501367,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8506,"mtime":1610819110079,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3557,"mtime":1611520263560,"results":"48","hashOfConfig":"37"},{"size":4170,"mtime":1611520320540,"results":"49","hashOfConfig":"37"},{"size":804,"mtime":1610377267941,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1730,"mtime":1610487463887,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3501,"mtime":1611432000960,"results":"56","hashOfConfig":"37"},{"size":10871,"mtime":1611431867988,"results":"57","hashOfConfig":"37"},{"size":5371,"mtime":1610724495124,"results":"58","hashOfConfig":"37"},{"size":2253,"mtime":1611422000317,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8908,"mtime":1611345194602,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3508,"mtime":1611159241128,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1192,"mtime":1611155623122,"results":"68","hashOfConfig":"37"},{"size":1399,"mtime":1611157845275,"results":"69","hashOfConfig":"37"},{"size":8614,"mtime":1611521712843,"results":"70","hashOfConfig":"37"},{"size":4148,"mtime":1611522331094,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["155","156"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",["157"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["158"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["159"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["160"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["161","162"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",["163"],"import React, {useEffect, useState} from 'react'\r\nimport UsersTable from \"./UsersTable\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {Container} from \"react-bootstrap\";\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\nfunction AdminPage() {\r\n    const { loading, request, error } = useRequest()\r\n    const [userData, setUserData] = useState([])\r\n\r\n    async function loadUsers() {\r\n        const data = await request(\"/api/users/getUsers\")\r\n        if (data) setUserData(data.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadUsers().then()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ControlPanel load={loadUsers} />\r\n            <UsersTable usersData={userData} loading={loading} error={error} />\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AdminPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",["164","165"],"import React, {useEffect, useState} from \"react\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ControlPanel from \"./ControlPanel\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport CollectionsContainer from \"./CollectionsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction CollectionsPage() {\r\n    const ownerId = useParams().ownerId\r\n    const lang = useSelector(state => state.language)\r\n    const [collections, setCollections] = useState([])\r\n    const [owner, setOwner] = useState({})\r\n    const { request, loading, error } = useRequest()\r\n    async function loadUser() {\r\n        const data = await request(\r\n            \"/api/collections/getCollections\",\r\n            \"POST\",\r\n            { id: ownerId },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data) {\r\n            setCollections(data.collections)\r\n            setOwner(data.owner)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ownerId) loadUser().then()\r\n    }, [ownerId])\r\n\r\n    return (\r\n        <Container>\r\n            <ControlPanel owner={owner} loadCollections={loadUser} />\r\n            <span style={{ color: \"red\" }}>{error ? error : \"\"}</span>\r\n            {\r\n                !loading\r\n                ?\r\n                    <CollectionsContainer collections={collections} />\r\n                :\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CollectionsPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",["166"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\"\r\nimport Info from \"./Info\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport ItemsContainer from \"./ItemsContainer\";\r\n\r\nfunction CollectionPage() {\r\n    const [info, setInfo] = useState(null)\r\n\r\n    const [items, setItems] = useState(null)\r\n    const [fields, setFields] = useState([])\r\n    const id = useParams().id\r\n    const { loading, error, request } = useRequest()\r\n\r\n    async function loadCollection() {\r\n        const data = await request(\r\n            \"/api/collections/getCollection\",\r\n            \"POST\",\r\n            {\r\n                id: id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setInfo({\r\n                name: data.collection.name,\r\n                id: data.collection._id,\r\n                description: data.collection.description,\r\n                theme: data.collection.theme,\r\n                ownerId: data.collection.ownerId,\r\n                ownerName: data.collection.ownerName,\r\n                img_id: data.collection.img_id,\r\n                img_format: data.collection.img_format\r\n            })\r\n            setFields(data.collection.advancedFields)\r\n            const items = await request(\r\n                \"/api/collections/getItems\",\r\n                \"POST\",\r\n                {\r\n                    id: data.collection._id\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (items && items.ok) {\r\n                setItems(items.items)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n            }\r\n        }\r\n        const edit = await request(\r\n            \"/api/collections/editCollection\",\r\n            \"POST\",\r\n            {\r\n                edit: fields,\r\n                token: localStorage.getItem(\"token\"),\r\n                id,\r\n                ownerId: info.ownerId\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (edit && edit.ok) {\r\n            loadCollection().then()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollection().then()\r\n    }, [])\r\n    return (\r\n        <Container fluid>\r\n            {\r\n                loading || !info\r\n                ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                :\r\n                    <Col>\r\n                        <Info info={info} loadCollection={loadCollection} id={id} fields={fields} edit={edit} />\r\n                        <ItemsContainer items={items} size={2} isFilter={true} />\r\n                    </Col>\r\n            }\r\n            <span>{error || \"\"}</span>\r\n        </Container>\r\n    )\r\n}\r\nexport default CollectionPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["167"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((e, i) => {\r\n                            if (e.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={e.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["168"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["169"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col className={\"text-center text-md-left px-lg-2 px-0 mr-3 mr-lg-0\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",["170"],"import React, {useEffect, useState} from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row, Form, Col, Button} from \"react-bootstrap\";\r\nimport Comment from \"./Comment\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Comments({ itemID }) {\r\n    const lang = useSelector(state => state.language)\r\n    const isAuth = useSelector(state => state.isAuthUser)\r\n    const theme = useSelector(state => state.theme)\r\n    const [comments, setComments] = useState([])\r\n    const [message, setMessage] = useState(\"\")\r\n    const { request } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (itemID) loadComments(true).then()\r\n    }, [itemID])\r\n\r\n\r\n\r\n    async function loadComments(bool) {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {\r\n                id: itemID\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            if (bool) {\r\n                const id = setTimeout(() => {}, 1)\r\n                for (let i = 0; i <= id; i++) clearInterval(i)\r\n                setInterval(loadComments, 3000)\r\n            }\r\n            setComments(data.item.comments)\r\n        }\r\n    }\r\n\r\n    async function send() {\r\n        const data = await request(\r\n            \"/api/items/createComment\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                itemId: itemID,\r\n                message\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setMessage(\"\")\r\n            loadComments().then()\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 px-3 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row className={\"w-100 justify-content-center\"}>\r\n                <h1>{languages[lang].comments}: </h1>\r\n            </Row>\r\n            {\r\n                comments.length <= 0 ?\r\n                    <Row className={\"w-100 justify-content-center mt-3\"}>\r\n                        <span style={{ color: \"#777171\"}}>{languages[lang].commentsMessage}</span>\r\n                    </Row> :\r\n                    comments.map((e, i) => {\r\n                        return <Comment key={i} username={e.username} userId={e.userId} message={e.message} />\r\n                    })\r\n            }\r\n            {\r\n                isAuth ?\r\n                    <Container>\r\n                        <Row className={\"mt-5 justify-content-center\"}>\r\n                            <Col md={7} xs={9}>\r\n                                <Form.Control\r\n                                    as={\"textarea\"}\r\n                                    rows={3}\r\n                                    value={message}\r\n                                    onChange={(e) => setMessage(e.target.value)}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={1} className={\"justify-content-center mt-3\"}>\r\n                                <Button variant={\"primary\"} className={\"my-auto\"} onClick={send}>{languages[lang].send}</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container> : []\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Comments","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["171"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",["172"],"import React, {useEffect, useState} from \"react\"\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nfunction LastItems() {\r\n    const [items, setItems] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadItems() {\r\n        const data = await request(\r\n            \"/api/collections/getAllItems\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            setItems(data.items.slice(data.items.length - 7 > 0 && data.items.length - 7))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItems().then()\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                loading && items\r\n                    ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <ItemsContainer items={items} size={3} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LastItems","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",["173"],"import React, {useEffect, useState} from \"react\"\r\nimport CollectionsContainer from \"../CollectionsPage/CollectionsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nfunction BiggestCollections() {\r\n    const [collections, setCollections] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadCollections() {\r\n        const data = await request (\r\n            \"/api/collections/getAllCollections\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            const biggestCollections = data.collections.sort((a, b) => {\r\n                return b.items > a.items ? 1 : -1\r\n            }).slice(0, data.collections.length >= 3 ? 3 : data.collections.length)\r\n            setCollections(biggestCollections)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollections().then()\r\n    }, [])\r\n    return (\r\n        <Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <CollectionsContainer collections={collections} />\r\n            }\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default BiggestCollections","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",["174","175","176"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["177","178","179","180"],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":6,"column":9,"nodeType":"187","messageId":"188","endLine":6,"endColumn":24},{"ruleId":"189","severity":1,"message":"190","line":33,"column":8,"nodeType":"191","endLine":33,"endColumn":24,"suggestions":"192"},{"ruleId":"193","severity":1,"message":"194","line":18,"column":36,"nodeType":"195","messageId":"196","endLine":18,"endColumn":37},{"ruleId":"193","severity":1,"message":"194","line":44,"column":43,"nodeType":"195","messageId":"196","endLine":44,"endColumn":44},{"ruleId":"189","severity":1,"message":"197","line":21,"column":8,"nodeType":"191","endLine":21,"endColumn":10,"suggestions":"198"},{"ruleId":"193","severity":1,"message":"194","line":49,"column":43,"nodeType":"195","messageId":"196","endLine":49,"endColumn":44},{"ruleId":"189","severity":1,"message":"199","line":18,"column":8,"nodeType":"191","endLine":18,"endColumn":10,"suggestions":"200"},{"ruleId":"185","severity":1,"message":"201","line":12,"column":11,"nodeType":"187","messageId":"188","endLine":12,"endColumn":15},{"ruleId":"189","severity":1,"message":"202","line":33,"column":8,"nodeType":"191","endLine":33,"endColumn":17,"suggestions":"203"},{"ruleId":"189","severity":1,"message":"204","line":91,"column":8,"nodeType":"191","endLine":91,"endColumn":10,"suggestions":"205"},{"ruleId":"189","severity":1,"message":"206","line":21,"column":8,"nodeType":"191","endLine":21,"endColumn":16,"suggestions":"207"},{"ruleId":"189","severity":1,"message":"208","line":77,"column":8,"nodeType":"191","endLine":77,"endColumn":10,"suggestions":"209"},{"ruleId":"189","severity":1,"message":"210","line":31,"column":8,"nodeType":"191","endLine":31,"endColumn":22,"suggestions":"211"},{"ruleId":"189","severity":1,"message":"212","line":18,"column":8,"nodeType":"191","endLine":18,"endColumn":16,"suggestions":"213"},{"ruleId":"189","severity":1,"message":"214","line":27,"column":8,"nodeType":"191","endLine":27,"endColumn":10,"suggestions":"215"},{"ruleId":"189","severity":1,"message":"216","line":23,"column":8,"nodeType":"191","endLine":23,"endColumn":10,"suggestions":"217"},{"ruleId":"189","severity":1,"message":"218","line":26,"column":8,"nodeType":"191","endLine":26,"endColumn":10,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":27,"column":39,"nodeType":"222","messageId":"223","endLine":27,"endColumn":41},{"ruleId":"189","severity":1,"message":"224","line":44,"column":8,"nodeType":"191","endLine":44,"endColumn":17,"suggestions":"225"},{"ruleId":"220","severity":1,"message":"226","line":98,"column":79,"nodeType":"222","messageId":"223","endLine":98,"endColumn":81},{"ruleId":"220","severity":1,"message":"227","line":28,"column":39,"nodeType":"222","messageId":"223","endLine":28,"endColumn":41},{"ruleId":"220","severity":1,"message":"227","line":35,"column":43,"nodeType":"222","messageId":"223","endLine":35,"endColumn":45},{"ruleId":"220","severity":1,"message":"227","line":43,"column":43,"nodeType":"222","messageId":"223","endLine":43,"endColumn":45},{"ruleId":"189","severity":1,"message":"228","line":55,"column":8,"nodeType":"191","endLine":55,"endColumn":14,"suggestions":"229"},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"no-unused-vars","'useGoogleLogout' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["232"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["233"],"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["234"],"'lang' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["235"],"React Hook useEffect has a missing dependency: 'loadCollection'. Either include it or remove the dependency array.",["236"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["237"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["238"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["239"],"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",["240"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["241"],"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.",["242"],"React Hook useEffect has a missing dependency: 'loadCollections'. Either include it or remove the dependency array.",["243"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'allItems' and 'setShowedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["244"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","Array.prototype.sort() expects a value to be returned at the end of arrow function.","React Hook useEffect has missing dependencies: 'allItems', 'setShowedItems', and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["245"],"no-global-assign","no-unsafe-negation",{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},"Update the dependencies array to be: [advancedFields, form]",{"range":"274","text":"275"},"Update the dependencies array to be: [login]",{"range":"276","text":"277"},"Update the dependencies array to be: [loadUsers]",{"range":"278","text":"279"},"Update the dependencies array to be: [loadUser, ownerId]",{"range":"280","text":"281"},"Update the dependencies array to be: [loadCollection]",{"range":"282","text":"283"},"Update the dependencies array to be: [fields, item]",{"range":"284","text":"285"},"Update the dependencies array to be: [loadItem]",{"range":"286","text":"287"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"288","text":"289"},"Update the dependencies array to be: [itemID, loadComments]",{"range":"290","text":"291"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"292","text":"293"},"Update the dependencies array to be: [loadItems]",{"range":"294","text":"295"},"Update the dependencies array to be: [loadCollections]",{"range":"296","text":"297"},"Update the dependencies array to be: [allItems, filters, setShowedItems]",{"range":"298","text":"299"},"Update the dependencies array to be: [allItems, setShowedItems, showedItems, sort]",{"range":"300","text":"301"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[564,566],"[loadUsers]",[1118,1127],"[loadUser, ownerId]",[2810,2812],"[loadCollection]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[713,721],"[itemID, loadComments]",[1068,1070],"[findItems, loadTags, text]",[729,731],"[loadItems]",[948,950],"[loadCollections]",[2014,2023],"[allItems, filters, setShowedItems]",[2414,2420],"[allItems, setShowedItems, showedItems, sort]"]
>>>>>>> relise2
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> relise2
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> relise2
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8247,"mtime":1611521501367,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8506,"mtime":1610819110079,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3557,"mtime":1611520263560,"results":"48","hashOfConfig":"37"},{"size":4170,"mtime":1611520320540,"results":"49","hashOfConfig":"37"},{"size":804,"mtime":1610377267941,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1730,"mtime":1610487463887,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3501,"mtime":1611432000960,"results":"56","hashOfConfig":"37"},{"size":10871,"mtime":1611431867988,"results":"57","hashOfConfig":"37"},{"size":5371,"mtime":1610724495124,"results":"58","hashOfConfig":"37"},{"size":2253,"mtime":1611422000317,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8908,"mtime":1611345194602,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3508,"mtime":1611159241128,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1192,"mtime":1611155623122,"results":"68","hashOfConfig":"37"},{"size":1399,"mtime":1611157845275,"results":"69","hashOfConfig":"37"},{"size":8774,"mtime":1611547782337,"results":"70","hashOfConfig":"37"},{"size":4148,"mtime":1611522331094,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"74"},{"filePath":"154","messages":"155","errorCount":2,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["159","160"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",["161"],"import React, {useState} from 'react'\r\nimport {Button, Col, Collapse, Dropdown, Form, Nav, Navbar, Row} from \"react-bootstrap\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {useGoogleLogout} from \"react-google-login\";\r\nlet language = require('../languages.json')\r\n\r\nfunction Header({ isLogged }) {\r\n    const dispatch = useDispatch()\r\n    const userId = useSelector(state => state.userId)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [text, setText] = useState(\"\")\r\n    function logout() {\r\n        if (localStorage.getItem(\"type\") === \"google\") {\r\n            //window.open(\"https://mail.google.com/mail/u/0/?logout&hl=en\", '_blank')\r\n        }\r\n        else if (localStorage.getItem(\"type\") === \"VK\") {\r\n            window.VK.Auth.logout((res) => {\r\n                console.log(res)\r\n            })\r\n        }\r\n        window.location = \"/signIn\"\r\n        localStorage.clear()\r\n        dispatch({ type: \"LOGOUT_USER\" })\r\n    }\r\n    function search() {\r\n        window.location = \"/search/\" + text\r\n    }\r\n    return (\r\n        <Navbar bg={theme} variant={theme} className={\"w-100 bg-\" + theme}>\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"/\">{language[lang].header.home}</Nav.Link>\r\n                { isLogged\r\n                    ?\r\n                    [\r\n                        <Nav.Link href={\"/collections/\" + String(userId)}\r\n                                  key={0}\r\n                        >{language[lang].header.collections}\r\n                        </Nav.Link>,\r\n                        <Nav.Link href=\"/search/\" key={1}>{language[lang].header.search}</Nav.Link>\r\n                    ]\r\n                    :\r\n                    [\r\n                        <Nav.Link href=\"/search/\" key={2}>{language[lang].header.search}</Nav.Link>,\r\n                        <Nav.Link href=\"/signUp\" key={0}>{language[lang].header.signup}</Nav.Link>,\r\n                        <Nav.Link href=\"/signIn\" key={1}>{language[lang].header.signin}</Nav.Link>\r\n                    ]\r\n                }\r\n            </Nav>\r\n            <Col className={\"d-none d-md-flex justify-content-end w-100\"}>\r\n                <Row>\r\n                    <LanguageChange />\r\n                    <ThemeChange />\r\n                    {\r\n                        isLogged\r\n                            ?\r\n                            <Button variant=\"outline-danger\"\r\n                                    onClick={logout}\r\n                                    className={\"mr-md-4\"}\r\n                            >{language[lang].header.logout}\r\n                            </Button>\r\n                            :\r\n                            []\r\n                    }\r\n                    <Form inline className={\"w-auto\"}>\r\n                        <Row className={\"d-none d-md-inline\"}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder={language[lang].header.search}\r\n                                className=\"mr-sm-2\"\r\n                                value={text}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                            <Button variant=\"outline-info\" onClick={search}>{language[lang].header.search}</Button>\r\n                        </Row>\r\n                    </Form>\r\n                </Row>\r\n            </Col>\r\n            <BurgerMenu\r\n                logout={logout}\r\n                text={text}\r\n                setText={setText}\r\n                lang={lang}\r\n                isLogged={isLogged}\r\n                search={search}\r\n            />\r\n\r\n\r\n\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nfunction LanguageChange() {\r\n    const language = useSelector(state => state.language)\r\n    const dispatch = useDispatch()\r\n    const { request } = useRequest()\r\n\r\n    async function setLanguage(e) {\r\n        e.preventDefault()\r\n        await request(\r\n            \"/api/users/setLanguage\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                language: e.target.innerText\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        localStorage.setItem(\"language\", e.target.innerText)\r\n        dispatch({ type: \"SET_LANGUAGE\", payload: e.target.innerText })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <Dropdown className={\"mr-2\"}>\r\n            <Dropdown.Toggle variant=\"outline-primary\" id=\"dropdown-basic\">\r\n                {language}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item onClick={setLanguage}>{ language === \"rus\" ? \"en\" : \"rus\" }</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}\r\n\r\nfunction ThemeChange() {\r\n    const theme = useSelector(state => state.theme)\r\n    const dispatch = useDispatch()\r\n    const { request } = useRequest()\r\n\r\n    async function setTheme(e) {\r\n        await request(\r\n            \"/api/users/setTheme\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                theme: e.target.innerText\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        localStorage.setItem(\"theme\", e.target.innerText)\r\n        dispatch({ type: \"SET_THEME\", payload: e.target.innerText })\r\n    }\r\n\r\n\r\n    return (\r\n        <Dropdown className={\"mr-md-4 mr-2\"}>\r\n            <Dropdown.Toggle variant=\"outline-primary\" id=\"dropdown-basic\">\r\n                {theme}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item onClick={setTheme}>{ theme === \"light\" ? \"dark\" : \"light\" }</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}\r\n\r\nfunction BurgerMenu({ isLogged, logout, lang, text, search, setText }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    return (\r\n        <Col className={\"d-flex d-md-none justify-content-end\"}>\r\n            <Row className={\"w-100 justify-content-end\"}>\r\n                    <Row className={\"w-100 justify-content-end pr-4\"}>\r\n                        <Icon.ThreeDots  style={{ fontSize: \"28px\" }} onClick={() => setIsOpen(!isOpen)}/>\r\n                    </Row>\r\n\r\n                    <Collapse in={isOpen}>\r\n                        <Row className={\"d-\" + (isOpen ? \"flex\" : \"none\")}>\r\n                            <Col >\r\n                                <LanguageChange />\r\n                                <ThemeChange />\r\n                                {\r\n                                    isLogged\r\n                                        ?\r\n                                        <Button variant=\"outline-danger\"\r\n                                                onClick={logout}\r\n                                                className={\"mr-md-4\"}\r\n                                        >{language[lang].header.logout}\r\n                                        </Button>\r\n                                        :\r\n                                        []\r\n                                }\r\n                                <Form inline className={\"w-auto\"}>\r\n                                    <Row className={\"d-none d-md-inline\"}>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder={language[lang].header.search}\r\n                                            className=\"mr-sm-2\"\r\n                                            value={text}\r\n                                            onChange={(e) => setText(e.target.value)}\r\n                                        />\r\n                                        <Button variant=\"outline-info\" onClick={search}>{language[lang].header.search}</Button>\r\n                                    </Row>\r\n                                </Form>\r\n                            </Col>\r\n                        </Row>\r\n                    </Collapse>\r\n            </Row>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["163"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["164"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["165","166"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",["167"],"import React, {useEffect, useState} from 'react'\r\nimport UsersTable from \"./UsersTable\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {Container} from \"react-bootstrap\";\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\nfunction AdminPage() {\r\n    const { loading, request, error } = useRequest()\r\n    const [userData, setUserData] = useState([])\r\n\r\n    async function loadUsers() {\r\n        const data = await request(\"/api/users/getUsers\")\r\n        if (data) setUserData(data.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadUsers().then()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ControlPanel load={loadUsers} />\r\n            <UsersTable usersData={userData} loading={loading} error={error} />\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AdminPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",["168","169"],"import React, {useEffect, useState} from \"react\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ControlPanel from \"./ControlPanel\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport CollectionsContainer from \"./CollectionsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction CollectionsPage() {\r\n    const ownerId = useParams().ownerId\r\n    const lang = useSelector(state => state.language)\r\n    const [collections, setCollections] = useState([])\r\n    const [owner, setOwner] = useState({})\r\n    const { request, loading, error } = useRequest()\r\n    async function loadUser() {\r\n        const data = await request(\r\n            \"/api/collections/getCollections\",\r\n            \"POST\",\r\n            { id: ownerId },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data) {\r\n            setCollections(data.collections)\r\n            setOwner(data.owner)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ownerId) loadUser().then()\r\n    }, [ownerId])\r\n\r\n    return (\r\n        <Container>\r\n            <ControlPanel owner={owner} loadCollections={loadUser} />\r\n            <span style={{ color: \"red\" }}>{error ? error : \"\"}</span>\r\n            {\r\n                !loading\r\n                ?\r\n                    <CollectionsContainer collections={collections} />\r\n                :\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CollectionsPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",["170"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\"\r\nimport Info from \"./Info\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport ItemsContainer from \"./ItemsContainer\";\r\n\r\nfunction CollectionPage() {\r\n    const [info, setInfo] = useState(null)\r\n\r\n    const [items, setItems] = useState(null)\r\n    const [fields, setFields] = useState([])\r\n    const id = useParams().id\r\n    const { loading, error, request } = useRequest()\r\n\r\n    async function loadCollection() {\r\n        const data = await request(\r\n            \"/api/collections/getCollection\",\r\n            \"POST\",\r\n            {\r\n                id: id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setInfo({\r\n                name: data.collection.name,\r\n                id: data.collection._id,\r\n                description: data.collection.description,\r\n                theme: data.collection.theme,\r\n                ownerId: data.collection.ownerId,\r\n                ownerName: data.collection.ownerName,\r\n                img_id: data.collection.img_id,\r\n                img_format: data.collection.img_format\r\n            })\r\n            setFields(data.collection.advancedFields)\r\n            const items = await request(\r\n                \"/api/collections/getItems\",\r\n                \"POST\",\r\n                {\r\n                    id: data.collection._id\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (items && items.ok) {\r\n                setItems(items.items)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n            }\r\n        }\r\n        const edit = await request(\r\n            \"/api/collections/editCollection\",\r\n            \"POST\",\r\n            {\r\n                edit: fields,\r\n                token: localStorage.getItem(\"token\"),\r\n                id,\r\n                ownerId: info.ownerId\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (edit && edit.ok) {\r\n            loadCollection().then()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollection().then()\r\n    }, [])\r\n    return (\r\n        <Container fluid>\r\n            {\r\n                loading || !info\r\n                ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                :\r\n                    <Col>\r\n                        <Info info={info} loadCollection={loadCollection} id={id} fields={fields} edit={edit} />\r\n                        <ItemsContainer items={items} size={2} isFilter={true} />\r\n                    </Col>\r\n            }\r\n            <span>{error || \"\"}</span>\r\n        </Container>\r\n    )\r\n}\r\nexport default CollectionPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["171"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((e, i) => {\r\n                            if (e.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={e.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["172"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["173"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col className={\"text-center text-md-left px-lg-2 px-0 mr-3 mr-lg-0\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",["174"],"import React, {useEffect, useState} from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row, Form, Col, Button} from \"react-bootstrap\";\r\nimport Comment from \"./Comment\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Comments({ itemID }) {\r\n    const lang = useSelector(state => state.language)\r\n    const isAuth = useSelector(state => state.isAuthUser)\r\n    const theme = useSelector(state => state.theme)\r\n    const [comments, setComments] = useState([])\r\n    const [message, setMessage] = useState(\"\")\r\n    const { request } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (itemID) loadComments(true).then()\r\n    }, [itemID])\r\n\r\n\r\n\r\n    async function loadComments(bool) {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {\r\n                id: itemID\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            if (bool) {\r\n                const id = setTimeout(() => {}, 1)\r\n                for (let i = 0; i <= id; i++) clearInterval(i)\r\n                setInterval(loadComments, 3000)\r\n            }\r\n            setComments(data.item.comments)\r\n        }\r\n    }\r\n\r\n    async function send() {\r\n        const data = await request(\r\n            \"/api/items/createComment\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                itemId: itemID,\r\n                message\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setMessage(\"\")\r\n            loadComments().then()\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 px-3 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row className={\"w-100 justify-content-center\"}>\r\n                <h1>{languages[lang].comments}: </h1>\r\n            </Row>\r\n            {\r\n                comments.length <= 0 ?\r\n                    <Row className={\"w-100 justify-content-center mt-3\"}>\r\n                        <span style={{ color: \"#777171\"}}>{languages[lang].commentsMessage}</span>\r\n                    </Row> :\r\n                    comments.map((e, i) => {\r\n                        return <Comment key={i} username={e.username} userId={e.userId} message={e.message} />\r\n                    })\r\n            }\r\n            {\r\n                isAuth ?\r\n                    <Container>\r\n                        <Row className={\"mt-5 justify-content-center\"}>\r\n                            <Col md={7} xs={9}>\r\n                                <Form.Control\r\n                                    as={\"textarea\"}\r\n                                    rows={3}\r\n                                    value={message}\r\n                                    onChange={(e) => setMessage(e.target.value)}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={1} className={\"justify-content-center mt-3\"}>\r\n                                <Button variant={\"primary\"} className={\"my-auto\"} onClick={send}>{languages[lang].send}</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container> : []\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Comments","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["175"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",["176"],"import React, {useEffect, useState} from \"react\"\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nfunction LastItems() {\r\n    const [items, setItems] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadItems() {\r\n        const data = await request(\r\n            \"/api/collections/getAllItems\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            setItems(data.items.slice(data.items.length - 7 > 0 && data.items.length - 7))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItems().then()\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                loading && items\r\n                    ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <ItemsContainer items={items} size={3} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LastItems","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",["177"],"import React, {useEffect, useState} from \"react\"\r\nimport CollectionsContainer from \"../CollectionsPage/CollectionsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nfunction BiggestCollections() {\r\n    const [collections, setCollections] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadCollections() {\r\n        const data = await request (\r\n            \"/api/collections/getAllCollections\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            const biggestCollections = data.collections.sort((a, b) => {\r\n                return b.items > a.items ? 1 : -1\r\n            }).slice(0, data.collections.length >= 3 ? 3 : data.collections.length)\r\n            setCollections(biggestCollections)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollections().then()\r\n    }, [])\r\n    return (\r\n        <Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <CollectionsContainer collections={collections} />\r\n            }\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default BiggestCollections","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",["178","179","180","181","182"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["183","184","185","186"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":6,"column":9,"nodeType":"193","messageId":"194","endLine":6,"endColumn":24},{"ruleId":"195","severity":1,"message":"196","line":33,"column":8,"nodeType":"197","endLine":33,"endColumn":24,"suggestions":"198"},{"ruleId":"199","severity":1,"message":"200","line":18,"column":36,"nodeType":"201","messageId":"202","endLine":18,"endColumn":37},{"ruleId":"199","severity":1,"message":"200","line":44,"column":43,"nodeType":"201","messageId":"202","endLine":44,"endColumn":44},{"ruleId":"195","severity":1,"message":"203","line":21,"column":8,"nodeType":"197","endLine":21,"endColumn":10,"suggestions":"204"},{"ruleId":"199","severity":1,"message":"200","line":49,"column":43,"nodeType":"201","messageId":"202","endLine":49,"endColumn":44},{"ruleId":"195","severity":1,"message":"205","line":18,"column":8,"nodeType":"197","endLine":18,"endColumn":10,"suggestions":"206"},{"ruleId":"191","severity":1,"message":"207","line":12,"column":11,"nodeType":"193","messageId":"194","endLine":12,"endColumn":15},{"ruleId":"195","severity":1,"message":"208","line":33,"column":8,"nodeType":"197","endLine":33,"endColumn":17,"suggestions":"209"},{"ruleId":"195","severity":1,"message":"210","line":91,"column":8,"nodeType":"197","endLine":91,"endColumn":10,"suggestions":"211"},{"ruleId":"195","severity":1,"message":"212","line":21,"column":8,"nodeType":"197","endLine":21,"endColumn":16,"suggestions":"213"},{"ruleId":"195","severity":1,"message":"214","line":77,"column":8,"nodeType":"197","endLine":77,"endColumn":10,"suggestions":"215"},{"ruleId":"195","severity":1,"message":"216","line":31,"column":8,"nodeType":"197","endLine":31,"endColumn":22,"suggestions":"217"},{"ruleId":"195","severity":1,"message":"218","line":18,"column":8,"nodeType":"197","endLine":18,"endColumn":16,"suggestions":"219"},{"ruleId":"195","severity":1,"message":"220","line":27,"column":8,"nodeType":"197","endLine":27,"endColumn":10,"suggestions":"221"},{"ruleId":"195","severity":1,"message":"222","line":23,"column":8,"nodeType":"197","endLine":23,"endColumn":10,"suggestions":"223"},{"ruleId":"195","severity":1,"message":"224","line":26,"column":8,"nodeType":"197","endLine":26,"endColumn":10,"suggestions":"225"},{"ruleId":"226","severity":1,"message":"227","line":27,"column":39,"nodeType":"228","messageId":"229","endLine":27,"endColumn":41},{"ruleId":"195","severity":1,"message":"230","line":44,"column":8,"nodeType":"197","endLine":44,"endColumn":17,"suggestions":"231"},{"ruleId":"226","severity":1,"message":"232","line":98,"column":79,"nodeType":"228","messageId":"229","endLine":98,"endColumn":81},{"ruleId":"233","severity":2,"message":"234","line":168,"column":90,"nodeType":"193","messageId":"235","endLine":168,"endColumn":95},{"ruleId":"233","severity":2,"message":"236","line":168,"column":100,"nodeType":"193","messageId":"235","endLine":168,"endColumn":104},{"ruleId":"226","severity":1,"message":"237","line":28,"column":39,"nodeType":"228","messageId":"229","endLine":28,"endColumn":41},{"ruleId":"226","severity":1,"message":"237","line":35,"column":43,"nodeType":"228","messageId":"229","endLine":35,"endColumn":45},{"ruleId":"226","severity":1,"message":"237","line":43,"column":43,"nodeType":"228","messageId":"229","endLine":43,"endColumn":45},{"ruleId":"195","severity":1,"message":"238","line":55,"column":8,"nodeType":"197","endLine":55,"endColumn":14,"suggestions":"239"},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"no-unused-vars","'useGoogleLogout' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["242"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["244"],"'lang' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["245"],"React Hook useEffect has a missing dependency: 'loadCollection'. Either include it or remove the dependency array.",["246"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["247"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["248"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["249"],"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",["250"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["251"],"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.",["252"],"React Hook useEffect has a missing dependency: 'loadCollections'. Either include it or remove the dependency array.",["253"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'allItems' and 'setShowedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["254"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","no-undef","'theme' is not defined.","undef","'dark' is not defined.","Array.prototype.sort() expects a value to be returned at the end of arrow function.","React Hook useEffect has missing dependencies: 'allItems', 'setShowedItems', and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["255"],"no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},"Update the dependencies array to be: [advancedFields, form]",{"range":"284","text":"285"},"Update the dependencies array to be: [login]",{"range":"286","text":"287"},"Update the dependencies array to be: [loadUsers]",{"range":"288","text":"289"},"Update the dependencies array to be: [loadUser, ownerId]",{"range":"290","text":"291"},"Update the dependencies array to be: [loadCollection]",{"range":"292","text":"293"},"Update the dependencies array to be: [fields, item]",{"range":"294","text":"295"},"Update the dependencies array to be: [loadItem]",{"range":"296","text":"297"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"298","text":"299"},"Update the dependencies array to be: [itemID, loadComments]",{"range":"300","text":"301"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"302","text":"303"},"Update the dependencies array to be: [loadItems]",{"range":"304","text":"305"},"Update the dependencies array to be: [loadCollections]",{"range":"306","text":"307"},"Update the dependencies array to be: [allItems, filters, setShowedItems]",{"range":"308","text":"309"},"Update the dependencies array to be: [allItems, setShowedItems, showedItems, sort]",{"range":"310","text":"311"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[564,566],"[loadUsers]",[1118,1127],"[loadUser, ownerId]",[2810,2812],"[loadCollection]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[713,721],"[itemID, loadComments]",[1068,1070],"[findItems, loadTags, text]",[729,731],"[loadItems]",[948,950],"[loadCollections]",[2014,2023],"[allItems, filters, setShowedItems]",[2414,2420],"[allItems, setShowedItems, showedItems, sort]"]
>>>>>>> someStyles
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8247,"mtime":1611521501367,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8506,"mtime":1610819110079,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3557,"mtime":1611520263560,"results":"48","hashOfConfig":"37"},{"size":4170,"mtime":1611520320540,"results":"49","hashOfConfig":"37"},{"size":804,"mtime":1610377267941,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1730,"mtime":1610487463887,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3501,"mtime":1611432000960,"results":"56","hashOfConfig":"37"},{"size":10871,"mtime":1611431867988,"results":"57","hashOfConfig":"37"},{"size":5371,"mtime":1610724495124,"results":"58","hashOfConfig":"37"},{"size":2253,"mtime":1611422000317,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8908,"mtime":1611345194602,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3508,"mtime":1611159241128,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1192,"mtime":1611155623122,"results":"68","hashOfConfig":"37"},{"size":1399,"mtime":1611157845275,"results":"69","hashOfConfig":"37"},{"size":8830,"mtime":1611548726644,"results":"70","hashOfConfig":"37"},{"size":4148,"mtime":1611522331094,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"74"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["159","160"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",["161"],"import React, {useState} from 'react'\r\nimport {Button, Col, Collapse, Dropdown, Form, Nav, Navbar, Row} from \"react-bootstrap\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {useGoogleLogout} from \"react-google-login\";\r\nlet language = require('../languages.json')\r\n\r\nfunction Header({ isLogged }) {\r\n    const dispatch = useDispatch()\r\n    const userId = useSelector(state => state.userId)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [text, setText] = useState(\"\")\r\n    function logout() {\r\n        if (localStorage.getItem(\"type\") === \"google\") {\r\n            //window.open(\"https://mail.google.com/mail/u/0/?logout&hl=en\", '_blank')\r\n        }\r\n        else if (localStorage.getItem(\"type\") === \"VK\") {\r\n            window.VK.Auth.logout((res) => {\r\n                console.log(res)\r\n            })\r\n        }\r\n        window.location = \"/signIn\"\r\n        localStorage.clear()\r\n        dispatch({ type: \"LOGOUT_USER\" })\r\n    }\r\n    function search() {\r\n        window.location = \"/search/\" + text\r\n    }\r\n    return (\r\n        <Navbar bg={theme} variant={theme} className={\"w-100 bg-\" + theme}>\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"/\">{language[lang].header.home}</Nav.Link>\r\n                { isLogged\r\n                    ?\r\n                    [\r\n                        <Nav.Link href={\"/collections/\" + String(userId)}\r\n                                  key={0}\r\n                        >{language[lang].header.collections}\r\n                        </Nav.Link>,\r\n                        <Nav.Link href=\"/search/\" key={1}>{language[lang].header.search}</Nav.Link>\r\n                    ]\r\n                    :\r\n                    [\r\n                        <Nav.Link href=\"/search/\" key={2}>{language[lang].header.search}</Nav.Link>,\r\n                        <Nav.Link href=\"/signUp\" key={0}>{language[lang].header.signup}</Nav.Link>,\r\n                        <Nav.Link href=\"/signIn\" key={1}>{language[lang].header.signin}</Nav.Link>\r\n                    ]\r\n                }\r\n            </Nav>\r\n            <Col className={\"d-none d-md-flex justify-content-end w-100\"}>\r\n                <Row>\r\n                    <LanguageChange />\r\n                    <ThemeChange />\r\n                    {\r\n                        isLogged\r\n                            ?\r\n                            <Button variant=\"outline-danger\"\r\n                                    onClick={logout}\r\n                                    className={\"mr-md-4\"}\r\n                            >{language[lang].header.logout}\r\n                            </Button>\r\n                            :\r\n                            []\r\n                    }\r\n                    <Form inline className={\"w-auto\"}>\r\n                        <Row className={\"d-none d-md-inline\"}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder={language[lang].header.search}\r\n                                className=\"mr-sm-2\"\r\n                                value={text}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                            <Button variant=\"outline-info\" onClick={search}>{language[lang].header.search}</Button>\r\n                        </Row>\r\n                    </Form>\r\n                </Row>\r\n            </Col>\r\n            <BurgerMenu\r\n                logout={logout}\r\n                text={text}\r\n                setText={setText}\r\n                lang={lang}\r\n                isLogged={isLogged}\r\n                search={search}\r\n            />\r\n\r\n\r\n\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nfunction LanguageChange() {\r\n    const language = useSelector(state => state.language)\r\n    const dispatch = useDispatch()\r\n    const { request } = useRequest()\r\n\r\n    async function setLanguage(e) {\r\n        e.preventDefault()\r\n        await request(\r\n            \"/api/users/setLanguage\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                language: e.target.innerText\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        localStorage.setItem(\"language\", e.target.innerText)\r\n        dispatch({ type: \"SET_LANGUAGE\", payload: e.target.innerText })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <Dropdown className={\"mr-2\"}>\r\n            <Dropdown.Toggle variant=\"outline-primary\" id=\"dropdown-basic\">\r\n                {language}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item onClick={setLanguage}>{ language === \"rus\" ? \"en\" : \"rus\" }</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}\r\n\r\nfunction ThemeChange() {\r\n    const theme = useSelector(state => state.theme)\r\n    const dispatch = useDispatch()\r\n    const { request } = useRequest()\r\n\r\n    async function setTheme(e) {\r\n        await request(\r\n            \"/api/users/setTheme\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                theme: e.target.innerText\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        localStorage.setItem(\"theme\", e.target.innerText)\r\n        dispatch({ type: \"SET_THEME\", payload: e.target.innerText })\r\n    }\r\n\r\n\r\n    return (\r\n        <Dropdown className={\"mr-md-4 mr-2\"}>\r\n            <Dropdown.Toggle variant=\"outline-primary\" id=\"dropdown-basic\">\r\n                {theme}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item onClick={setTheme}>{ theme === \"light\" ? \"dark\" : \"light\" }</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}\r\n\r\nfunction BurgerMenu({ isLogged, logout, lang, text, search, setText }) {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    return (\r\n        <Col className={\"d-flex d-md-none justify-content-end\"}>\r\n            <Row className={\"w-100 justify-content-end\"}>\r\n                    <Row className={\"w-100 justify-content-end pr-4\"}>\r\n                        <Icon.ThreeDots  style={{ fontSize: \"28px\" }} onClick={() => setIsOpen(!isOpen)}/>\r\n                    </Row>\r\n\r\n                    <Collapse in={isOpen}>\r\n                        <Row className={\"d-\" + (isOpen ? \"flex\" : \"none\")}>\r\n                            <Col >\r\n                                <LanguageChange />\r\n                                <ThemeChange />\r\n                                {\r\n                                    isLogged\r\n                                        ?\r\n                                        <Button variant=\"outline-danger\"\r\n                                                onClick={logout}\r\n                                                className={\"mr-md-4\"}\r\n                                        >{language[lang].header.logout}\r\n                                        </Button>\r\n                                        :\r\n                                        []\r\n                                }\r\n                                <Form inline className={\"w-auto\"}>\r\n                                    <Row className={\"d-none d-md-inline\"}>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder={language[lang].header.search}\r\n                                            className=\"mr-sm-2\"\r\n                                            value={text}\r\n                                            onChange={(e) => setText(e.target.value)}\r\n                                        />\r\n                                        <Button variant=\"outline-info\" onClick={search}>{language[lang].header.search}</Button>\r\n                                    </Row>\r\n                                </Form>\r\n                            </Col>\r\n                        </Row>\r\n                    </Collapse>\r\n            </Row>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["163"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["164"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["165","166"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",["167"],"import React, {useEffect, useState} from 'react'\r\nimport UsersTable from \"./UsersTable\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {Container} from \"react-bootstrap\";\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\nfunction AdminPage() {\r\n    const { loading, request, error } = useRequest()\r\n    const [userData, setUserData] = useState([])\r\n\r\n    async function loadUsers() {\r\n        const data = await request(\"/api/users/getUsers\")\r\n        if (data) setUserData(data.data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadUsers().then()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <ControlPanel load={loadUsers} />\r\n            <UsersTable usersData={userData} loading={loading} error={error} />\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AdminPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",["168","169"],"import React, {useEffect, useState} from \"react\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ControlPanel from \"./ControlPanel\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport CollectionsContainer from \"./CollectionsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction CollectionsPage() {\r\n    const ownerId = useParams().ownerId\r\n    const lang = useSelector(state => state.language)\r\n    const [collections, setCollections] = useState([])\r\n    const [owner, setOwner] = useState({})\r\n    const { request, loading, error } = useRequest()\r\n    async function loadUser() {\r\n        const data = await request(\r\n            \"/api/collections/getCollections\",\r\n            \"POST\",\r\n            { id: ownerId },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data) {\r\n            setCollections(data.collections)\r\n            setOwner(data.owner)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ownerId) loadUser().then()\r\n    }, [ownerId])\r\n\r\n    return (\r\n        <Container>\r\n            <ControlPanel owner={owner} loadCollections={loadUser} />\r\n            <span style={{ color: \"red\" }}>{error ? error : \"\"}</span>\r\n            {\r\n                !loading\r\n                ?\r\n                    <CollectionsContainer collections={collections} />\r\n                :\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default CollectionsPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",["170"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\"\r\nimport Info from \"./Info\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport ItemsContainer from \"./ItemsContainer\";\r\n\r\nfunction CollectionPage() {\r\n    const [info, setInfo] = useState(null)\r\n\r\n    const [items, setItems] = useState(null)\r\n    const [fields, setFields] = useState([])\r\n    const id = useParams().id\r\n    const { loading, error, request } = useRequest()\r\n\r\n    async function loadCollection() {\r\n        const data = await request(\r\n            \"/api/collections/getCollection\",\r\n            \"POST\",\r\n            {\r\n                id: id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setInfo({\r\n                name: data.collection.name,\r\n                id: data.collection._id,\r\n                description: data.collection.description,\r\n                theme: data.collection.theme,\r\n                ownerId: data.collection.ownerId,\r\n                ownerName: data.collection.ownerName,\r\n                img_id: data.collection.img_id,\r\n                img_format: data.collection.img_format\r\n            })\r\n            setFields(data.collection.advancedFields)\r\n            const items = await request(\r\n                \"/api/collections/getItems\",\r\n                \"POST\",\r\n                {\r\n                    id: data.collection._id\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (items && items.ok) {\r\n                setItems(items.items)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n            }\r\n        }\r\n        const edit = await request(\r\n            \"/api/collections/editCollection\",\r\n            \"POST\",\r\n            {\r\n                edit: fields,\r\n                token: localStorage.getItem(\"token\"),\r\n                id,\r\n                ownerId: info.ownerId\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (edit && edit.ok) {\r\n            loadCollection().then()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollection().then()\r\n    }, [])\r\n    return (\r\n        <Container fluid>\r\n            {\r\n                loading || !info\r\n                ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                :\r\n                    <Col>\r\n                        <Info info={info} loadCollection={loadCollection} id={id} fields={fields} edit={edit} />\r\n                        <ItemsContainer items={items} size={2} isFilter={true} />\r\n                    </Col>\r\n            }\r\n            <span>{error || \"\"}</span>\r\n        </Container>\r\n    )\r\n}\r\nexport default CollectionPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["171"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((e, i) => {\r\n                            if (e.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={e.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["172"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["173"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col className={\"text-center text-md-left px-lg-2 px-0 mr-3 mr-lg-0\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",["174"],"import React, {useEffect, useState} from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row, Form, Col, Button} from \"react-bootstrap\";\r\nimport Comment from \"./Comment\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Comments({ itemID }) {\r\n    const lang = useSelector(state => state.language)\r\n    const isAuth = useSelector(state => state.isAuthUser)\r\n    const theme = useSelector(state => state.theme)\r\n    const [comments, setComments] = useState([])\r\n    const [message, setMessage] = useState(\"\")\r\n    const { request } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (itemID) loadComments(true).then()\r\n    }, [itemID])\r\n\r\n\r\n\r\n    async function loadComments(bool) {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {\r\n                id: itemID\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            if (bool) {\r\n                const id = setTimeout(() => {}, 1)\r\n                for (let i = 0; i <= id; i++) clearInterval(i)\r\n                setInterval(loadComments, 3000)\r\n            }\r\n            setComments(data.item.comments)\r\n        }\r\n    }\r\n\r\n    async function send() {\r\n        const data = await request(\r\n            \"/api/items/createComment\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                itemId: itemID,\r\n                message\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setMessage(\"\")\r\n            loadComments().then()\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 px-3 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row className={\"w-100 justify-content-center\"}>\r\n                <h1>{languages[lang].comments}: </h1>\r\n            </Row>\r\n            {\r\n                comments.length <= 0 ?\r\n                    <Row className={\"w-100 justify-content-center mt-3\"}>\r\n                        <span style={{ color: \"#777171\"}}>{languages[lang].commentsMessage}</span>\r\n                    </Row> :\r\n                    comments.map((e, i) => {\r\n                        return <Comment key={i} username={e.username} userId={e.userId} message={e.message} />\r\n                    })\r\n            }\r\n            {\r\n                isAuth ?\r\n                    <Container>\r\n                        <Row className={\"mt-5 justify-content-center\"}>\r\n                            <Col md={7} xs={9}>\r\n                                <Form.Control\r\n                                    as={\"textarea\"}\r\n                                    rows={3}\r\n                                    value={message}\r\n                                    onChange={(e) => setMessage(e.target.value)}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={1} className={\"justify-content-center mt-3\"}>\r\n                                <Button variant={\"primary\"} className={\"my-auto\"} onClick={send}>{languages[lang].send}</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container> : []\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Comments","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["175"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",["176"],"import React, {useEffect, useState} from \"react\"\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nfunction LastItems() {\r\n    const [items, setItems] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadItems() {\r\n        const data = await request(\r\n            \"/api/collections/getAllItems\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            setItems(data.items.slice(data.items.length - 7 > 0 && data.items.length - 7))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItems().then()\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                loading && items\r\n                    ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <ItemsContainer items={items} size={3} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default LastItems","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",["177"],"import React, {useEffect, useState} from \"react\"\r\nimport CollectionsContainer from \"../CollectionsPage/CollectionsContainer\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nfunction BiggestCollections() {\r\n    const [collections, setCollections] = useState(null)\r\n    const { request, loading } = useRequest()\r\n\r\n    async function loadCollections() {\r\n        const data = await request (\r\n            \"/api/collections/getAllCollections\",\r\n            \"GET\"\r\n        )\r\n        if (data && data.ok) {\r\n            const biggestCollections = data.collections.sort((a, b) => {\r\n                return b.items > a.items ? 1 : -1\r\n            }).slice(0, data.collections.length >= 3 ? 3 : data.collections.length)\r\n            setCollections(biggestCollections)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadCollections().then()\r\n    }, [])\r\n    return (\r\n        <Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row>\r\n                    :\r\n                    <CollectionsContainer collections={collections} />\r\n            }\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default BiggestCollections","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",["178","179","180"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["181","182","183","184"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":6,"column":9,"nodeType":"191","messageId":"192","endLine":6,"endColumn":24},{"ruleId":"193","severity":1,"message":"194","line":33,"column":8,"nodeType":"195","endLine":33,"endColumn":24,"suggestions":"196"},{"ruleId":"197","severity":1,"message":"198","line":18,"column":36,"nodeType":"199","messageId":"200","endLine":18,"endColumn":37},{"ruleId":"197","severity":1,"message":"198","line":44,"column":43,"nodeType":"199","messageId":"200","endLine":44,"endColumn":44},{"ruleId":"193","severity":1,"message":"201","line":21,"column":8,"nodeType":"195","endLine":21,"endColumn":10,"suggestions":"202"},{"ruleId":"197","severity":1,"message":"198","line":49,"column":43,"nodeType":"199","messageId":"200","endLine":49,"endColumn":44},{"ruleId":"193","severity":1,"message":"203","line":18,"column":8,"nodeType":"195","endLine":18,"endColumn":10,"suggestions":"204"},{"ruleId":"189","severity":1,"message":"205","line":12,"column":11,"nodeType":"191","messageId":"192","endLine":12,"endColumn":15},{"ruleId":"193","severity":1,"message":"206","line":33,"column":8,"nodeType":"195","endLine":33,"endColumn":17,"suggestions":"207"},{"ruleId":"193","severity":1,"message":"208","line":91,"column":8,"nodeType":"195","endLine":91,"endColumn":10,"suggestions":"209"},{"ruleId":"193","severity":1,"message":"210","line":21,"column":8,"nodeType":"195","endLine":21,"endColumn":16,"suggestions":"211"},{"ruleId":"193","severity":1,"message":"212","line":77,"column":8,"nodeType":"195","endLine":77,"endColumn":10,"suggestions":"213"},{"ruleId":"193","severity":1,"message":"214","line":31,"column":8,"nodeType":"195","endLine":31,"endColumn":22,"suggestions":"215"},{"ruleId":"193","severity":1,"message":"216","line":18,"column":8,"nodeType":"195","endLine":18,"endColumn":16,"suggestions":"217"},{"ruleId":"193","severity":1,"message":"218","line":27,"column":8,"nodeType":"195","endLine":27,"endColumn":10,"suggestions":"219"},{"ruleId":"193","severity":1,"message":"220","line":23,"column":8,"nodeType":"195","endLine":23,"endColumn":10,"suggestions":"221"},{"ruleId":"193","severity":1,"message":"222","line":26,"column":8,"nodeType":"195","endLine":26,"endColumn":10,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":28,"column":39,"nodeType":"226","messageId":"227","endLine":28,"endColumn":41},{"ruleId":"193","severity":1,"message":"228","line":45,"column":8,"nodeType":"195","endLine":45,"endColumn":17,"suggestions":"229"},{"ruleId":"224","severity":1,"message":"230","line":99,"column":79,"nodeType":"226","messageId":"227","endLine":99,"endColumn":81},{"ruleId":"224","severity":1,"message":"231","line":28,"column":39,"nodeType":"226","messageId":"227","endLine":28,"endColumn":41},{"ruleId":"224","severity":1,"message":"231","line":35,"column":43,"nodeType":"226","messageId":"227","endLine":35,"endColumn":45},{"ruleId":"224","severity":1,"message":"231","line":43,"column":43,"nodeType":"226","messageId":"227","endLine":43,"endColumn":45},{"ruleId":"193","severity":1,"message":"232","line":55,"column":8,"nodeType":"195","endLine":55,"endColumn":14,"suggestions":"233"},"no-native-reassign",["234"],"no-negated-in-lhs",["235"],"no-unused-vars","'useGoogleLogout' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["236"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["237"],"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["238"],"'lang' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["239"],"React Hook useEffect has a missing dependency: 'loadCollection'. Either include it or remove the dependency array.",["240"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["241"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["242"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'loadComments'. Either include it or remove the dependency array.",["244"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["245"],"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.",["246"],"React Hook useEffect has a missing dependency: 'loadCollections'. Either include it or remove the dependency array.",["247"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'allItems' and 'setShowedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["248"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","Array.prototype.sort() expects a value to be returned at the end of arrow function.","React Hook useEffect has missing dependencies: 'allItems', 'setShowedItems', and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["249"],"no-global-assign","no-unsafe-negation",{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},"Update the dependencies array to be: [advancedFields, form]",{"range":"278","text":"279"},"Update the dependencies array to be: [login]",{"range":"280","text":"281"},"Update the dependencies array to be: [loadUsers]",{"range":"282","text":"283"},"Update the dependencies array to be: [loadUser, ownerId]",{"range":"284","text":"285"},"Update the dependencies array to be: [loadCollection]",{"range":"286","text":"287"},"Update the dependencies array to be: [fields, item]",{"range":"288","text":"289"},"Update the dependencies array to be: [loadItem]",{"range":"290","text":"291"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"292","text":"293"},"Update the dependencies array to be: [itemID, loadComments]",{"range":"294","text":"295"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"296","text":"297"},"Update the dependencies array to be: [loadItems]",{"range":"298","text":"299"},"Update the dependencies array to be: [loadCollections]",{"range":"300","text":"301"},"Update the dependencies array to be: [allItems, filters, setShowedItems]",{"range":"302","text":"303"},"Update the dependencies array to be: [allItems, setShowedItems, showedItems, sort]",{"range":"304","text":"305"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[564,566],"[loadUsers]",[1118,1127],"[loadUser, ownerId]",[2810,2812],"[loadCollection]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[713,721],"[itemID, loadComments]",[1068,1070],"[findItems, loadTags, text]",[729,731],"[loadItems]",[948,950],"[loadCollections]",[2067,2076],"[allItems, filters, setShowedItems]",[2414,2420],"[allItems, setShowedItems, showedItems, sort]"]
>>>>>>> someStyles
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> someStyles
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> someStyles
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8394,"mtime":1611591658248,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8506,"mtime":1610819110079,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3557,"mtime":1611520263560,"results":"48","hashOfConfig":"37"},{"size":4170,"mtime":1611520320540,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":10871,"mtime":1611431867988,"results":"57","hashOfConfig":"37"},{"size":5371,"mtime":1611590714344,"results":"58","hashOfConfig":"37"},{"size":2253,"mtime":1611422000317,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8908,"mtime":1611345194602,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3566,"mtime":1611591214111,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":8941,"mtime":1611591474250,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["150","151"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["152"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["153"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["154"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["155","156"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["157"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["158"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col className={\"text-center text-md-left px-lg-2 px-0 mr-3 mr-lg-0\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["161"],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"167","line":33,"column":8,"nodeType":"168","endLine":33,"endColumn":24,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":18,"column":36,"nodeType":"172","messageId":"173","endLine":18,"endColumn":37},{"ruleId":"170","severity":1,"message":"171","line":44,"column":43,"nodeType":"172","messageId":"173","endLine":44,"endColumn":44},{"ruleId":"166","severity":1,"message":"174","line":21,"column":8,"nodeType":"168","endLine":21,"endColumn":10,"suggestions":"175"},{"ruleId":"170","severity":1,"message":"171","line":49,"column":43,"nodeType":"172","messageId":"173","endLine":49,"endColumn":44},{"ruleId":"166","severity":1,"message":"176","line":21,"column":8,"nodeType":"168","endLine":21,"endColumn":16,"suggestions":"177"},{"ruleId":"166","severity":1,"message":"178","line":77,"column":8,"nodeType":"168","endLine":77,"endColumn":10,"suggestions":"179"},{"ruleId":"166","severity":1,"message":"180","line":31,"column":8,"nodeType":"168","endLine":31,"endColumn":22,"suggestions":"181"},{"ruleId":"166","severity":1,"message":"182","line":27,"column":8,"nodeType":"168","endLine":27,"endColumn":10,"suggestions":"183"},{"ruleId":"166","severity":1,"message":"184","line":58,"column":8,"nodeType":"168","endLine":58,"endColumn":24,"suggestions":"185"},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["188"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["189"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["190"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["191"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["192"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["193"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["194"],"no-global-assign","no-unsafe-negation",{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},"Update the dependencies array to be: [advancedFields, form]",{"range":"209","text":"210"},"Update the dependencies array to be: [login]",{"range":"211","text":"212"},"Update the dependencies array to be: [fields, item]",{"range":"213","text":"214"},"Update the dependencies array to be: [loadItem]",{"range":"215","text":"216"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"217","text":"218"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"219","text":"220"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"221","text":"222"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> relise3
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> relise3
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> relise3
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8394,"mtime":1611591658248,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8506,"mtime":1610819110079,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3557,"mtime":1611520263560,"results":"48","hashOfConfig":"37"},{"size":4170,"mtime":1611520320540,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":10871,"mtime":1611431867988,"results":"57","hashOfConfig":"37"},{"size":5371,"mtime":1611590714344,"results":"58","hashOfConfig":"37"},{"size":2253,"mtime":1611422000317,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8908,"mtime":1611345194602,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3566,"mtime":1611591214111,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":8959,"mtime":1611592256000,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["150","151"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["152"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["153"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["154"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["155","156"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["157"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["158"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col className={\"text-center text-md-left px-lg-2 px-0 mr-3 mr-lg-0\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["161"],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"167","line":33,"column":8,"nodeType":"168","endLine":33,"endColumn":24,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":18,"column":36,"nodeType":"172","messageId":"173","endLine":18,"endColumn":37},{"ruleId":"170","severity":1,"message":"171","line":44,"column":43,"nodeType":"172","messageId":"173","endLine":44,"endColumn":44},{"ruleId":"166","severity":1,"message":"174","line":21,"column":8,"nodeType":"168","endLine":21,"endColumn":10,"suggestions":"175"},{"ruleId":"170","severity":1,"message":"171","line":49,"column":43,"nodeType":"172","messageId":"173","endLine":49,"endColumn":44},{"ruleId":"166","severity":1,"message":"176","line":21,"column":8,"nodeType":"168","endLine":21,"endColumn":16,"suggestions":"177"},{"ruleId":"166","severity":1,"message":"178","line":77,"column":8,"nodeType":"168","endLine":77,"endColumn":10,"suggestions":"179"},{"ruleId":"166","severity":1,"message":"180","line":31,"column":8,"nodeType":"168","endLine":31,"endColumn":22,"suggestions":"181"},{"ruleId":"166","severity":1,"message":"182","line":27,"column":8,"nodeType":"168","endLine":27,"endColumn":10,"suggestions":"183"},{"ruleId":"166","severity":1,"message":"184","line":58,"column":8,"nodeType":"168","endLine":58,"endColumn":24,"suggestions":"185"},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["188"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["189"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["190"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["191"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["192"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["193"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["194"],"no-global-assign","no-unsafe-negation",{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},"Update the dependencies array to be: [advancedFields, form]",{"range":"209","text":"210"},"Update the dependencies array to be: [login]",{"range":"211","text":"212"},"Update the dependencies array to be: [fields, item]",{"range":"213","text":"214"},"Update the dependencies array to be: [loadItem]",{"range":"215","text":"216"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"217","text":"218"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"219","text":"220"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"221","text":"222"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> filterFix
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> filterFix
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> filterFix
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8394,"mtime":1611591658248,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8506,"mtime":1610819110079,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3557,"mtime":1611520263560,"results":"48","hashOfConfig":"37"},{"size":4170,"mtime":1611520320540,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":10871,"mtime":1611431867988,"results":"57","hashOfConfig":"37"},{"size":5371,"mtime":1611590714344,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8908,"mtime":1611345194602,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3566,"mtime":1611591214111,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":8959,"mtime":1611592256000,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["152","153"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["154"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["155"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["156"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["157","158"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((e, i) => {\r\n                            if (e.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={e.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col className={\"text-center text-md-left px-lg-2 px-0 mr-3 mr-lg-0\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":33,"column":8,"nodeType":"170","endLine":33,"endColumn":24,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":18,"column":36,"nodeType":"174","messageId":"175","endLine":18,"endColumn":37},{"ruleId":"172","severity":1,"message":"173","line":44,"column":43,"nodeType":"174","messageId":"175","endLine":44,"endColumn":44},{"ruleId":"168","severity":1,"message":"176","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":10,"suggestions":"177"},{"ruleId":"172","severity":1,"message":"173","line":49,"column":43,"nodeType":"174","messageId":"175","endLine":49,"endColumn":44},{"ruleId":"168","severity":1,"message":"178","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":16,"suggestions":"179"},{"ruleId":"168","severity":1,"message":"180","line":77,"column":8,"nodeType":"170","endLine":77,"endColumn":10,"suggestions":"181"},{"ruleId":"168","severity":1,"message":"182","line":31,"column":8,"nodeType":"170","endLine":31,"endColumn":22,"suggestions":"183"},{"ruleId":"168","severity":1,"message":"184","line":27,"column":8,"nodeType":"170","endLine":27,"endColumn":10,"suggestions":"185"},{"ruleId":"168","severity":1,"message":"186","line":58,"column":8,"nodeType":"170","endLine":58,"endColumn":24,"suggestions":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["190"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["191"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["192"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["194"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["196"],"no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [advancedFields, form]",{"range":"211","text":"212"},"Update the dependencies array to be: [login]",{"range":"213","text":"214"},"Update the dependencies array to be: [fields, item]",{"range":"215","text":"216"},"Update the dependencies array to be: [loadItem]",{"range":"217","text":"218"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"219","text":"220"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"221","text":"222"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"223","text":"224"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> fix
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> fix
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> fix
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8394,"mtime":1611591658248,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8506,"mtime":1610819110079,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3557,"mtime":1611520263560,"results":"48","hashOfConfig":"37"},{"size":4170,"mtime":1611520320540,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":10915,"mtime":1611932440964,"results":"57","hashOfConfig":"37"},{"size":5371,"mtime":1611590714344,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9062,"mtime":1611932913440,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["151","152"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["153"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["154"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["155"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["156","157"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["158"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((e, i) => {\r\n                            if (e.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{e.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={e.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["160"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":33,"column":8,"nodeType":"169","endLine":33,"endColumn":24,"suggestions":"170"},{"ruleId":"171","severity":1,"message":"172","line":18,"column":36,"nodeType":"173","messageId":"174","endLine":18,"endColumn":37},{"ruleId":"171","severity":1,"message":"172","line":44,"column":43,"nodeType":"173","messageId":"174","endLine":44,"endColumn":44},{"ruleId":"167","severity":1,"message":"175","line":21,"column":8,"nodeType":"169","endLine":21,"endColumn":10,"suggestions":"176"},{"ruleId":"171","severity":1,"message":"172","line":49,"column":43,"nodeType":"173","messageId":"174","endLine":49,"endColumn":44},{"ruleId":"167","severity":1,"message":"177","line":21,"column":8,"nodeType":"169","endLine":21,"endColumn":16,"suggestions":"178"},{"ruleId":"167","severity":1,"message":"179","line":77,"column":8,"nodeType":"169","endLine":77,"endColumn":10,"suggestions":"180"},{"ruleId":"167","severity":1,"message":"181","line":31,"column":8,"nodeType":"169","endLine":31,"endColumn":22,"suggestions":"182"},{"ruleId":"167","severity":1,"message":"183","line":27,"column":8,"nodeType":"169","endLine":27,"endColumn":10,"suggestions":"184"},{"ruleId":"167","severity":1,"message":"185","line":58,"column":8,"nodeType":"169","endLine":58,"endColumn":24,"suggestions":"186"},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["189"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["191"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["192"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["194"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["195"],"no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},"Update the dependencies array to be: [advancedFields, form]",{"range":"210","text":"211"},"Update the dependencies array to be: [login]",{"range":"212","text":"213"},"Update the dependencies array to be: [fields, item]",{"range":"214","text":"215"},"Update the dependencies array to be: [loadItem]",{"range":"216","text":"217"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"218","text":"219"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"220","text":"221"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"222","text":"223"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> someAdaptivFixes
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> someAdaptivFixes
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> someAdaptivFixes
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8394,"mtime":1611591658248,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3557,"mtime":1611520263560,"results":"48","hashOfConfig":"37"},{"size":4170,"mtime":1611520320540,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":10915,"mtime":1611932440964,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["149","150"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["151"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["152"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["153"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={sendData} disabled={loading}>\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["154","155"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["156"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["157"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["158"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":33,"column":8,"nodeType":"167","endLine":33,"endColumn":24,"suggestions":"168"},{"ruleId":"169","severity":1,"message":"170","line":18,"column":36,"nodeType":"171","messageId":"172","endLine":18,"endColumn":37},{"ruleId":"169","severity":1,"message":"170","line":44,"column":43,"nodeType":"171","messageId":"172","endLine":44,"endColumn":44},{"ruleId":"165","severity":1,"message":"173","line":21,"column":8,"nodeType":"167","endLine":21,"endColumn":10,"suggestions":"174"},{"ruleId":"169","severity":1,"message":"170","line":49,"column":43,"nodeType":"171","messageId":"172","endLine":49,"endColumn":44},{"ruleId":"165","severity":1,"message":"175","line":21,"column":8,"nodeType":"167","endLine":21,"endColumn":16,"suggestions":"176"},{"ruleId":"165","severity":1,"message":"177","line":77,"column":8,"nodeType":"167","endLine":77,"endColumn":10,"suggestions":"178"},{"ruleId":"165","severity":1,"message":"179","line":31,"column":8,"nodeType":"167","endLine":31,"endColumn":22,"suggestions":"180"},{"ruleId":"165","severity":1,"message":"181","line":27,"column":8,"nodeType":"167","endLine":27,"endColumn":10,"suggestions":"182"},{"ruleId":"165","severity":1,"message":"183","line":58,"column":8,"nodeType":"167","endLine":58,"endColumn":24,"suggestions":"184"},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["187"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["188"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["189"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["191"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["192"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["193"],"no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [advancedFields, form]",{"range":"208","text":"209"},"Update the dependencies array to be: [login]",{"range":"210","text":"211"},"Update the dependencies array to be: [fields, item]",{"range":"212","text":"213"},"Update the dependencies array to be: [loadItem]",{"range":"214","text":"215"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"216","text":"217"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"218","text":"219"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"220","text":"221"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> filterFixes
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> filterFixes
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> filterFixes
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8394,"mtime":1611591658248,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4196,"mtime":1612021469139,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11532,"mtime":1612030298644,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["152","153"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["154"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["155"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["156"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["157","158"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user, lang, theme) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj, lang, theme)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":33,"column":8,"nodeType":"170","endLine":33,"endColumn":24,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":18,"column":36,"nodeType":"174","messageId":"175","endLine":18,"endColumn":37},{"ruleId":"172","severity":1,"message":"173","line":44,"column":43,"nodeType":"174","messageId":"175","endLine":44,"endColumn":44},{"ruleId":"168","severity":1,"message":"176","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":10,"suggestions":"177"},{"ruleId":"172","severity":1,"message":"173","line":49,"column":43,"nodeType":"174","messageId":"175","endLine":49,"endColumn":44},{"ruleId":"168","severity":1,"message":"178","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":16,"suggestions":"179"},{"ruleId":"168","severity":1,"message":"180","line":77,"column":8,"nodeType":"170","endLine":77,"endColumn":10,"suggestions":"181"},{"ruleId":"168","severity":1,"message":"182","line":31,"column":8,"nodeType":"170","endLine":31,"endColumn":22,"suggestions":"183"},{"ruleId":"168","severity":1,"message":"184","line":27,"column":8,"nodeType":"170","endLine":27,"endColumn":10,"suggestions":"185"},{"ruleId":"168","severity":1,"message":"186","line":58,"column":8,"nodeType":"170","endLine":58,"endColumn":24,"suggestions":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["190"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["191"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["192"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["194"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["196"],"no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [advancedFields, form]",{"range":"211","text":"212"},"Update the dependencies array to be: [login]",{"range":"213","text":"214"},"Update the dependencies array to be: [fields, item]",{"range":"215","text":"216"},"Update the dependencies array to be: [loadItem]",{"range":"217","text":"218"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"219","text":"220"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"221","text":"222"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"223","text":"224"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> CSV + someFixes
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> CSV + someFixes
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> CSV + someFixes
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8394,"mtime":1611591658248,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4196,"mtime":1612021469139,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11653,"mtime":1612032996963,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["152","153"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["154"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["155"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["156"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["157","158"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    useEffect(() => {\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [])\r\n\r\n    async function login(type, user, lang, theme) {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj, lang, theme)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":33,"column":8,"nodeType":"170","endLine":33,"endColumn":24,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":18,"column":36,"nodeType":"174","messageId":"175","endLine":18,"endColumn":37},{"ruleId":"172","severity":1,"message":"173","line":44,"column":43,"nodeType":"174","messageId":"175","endLine":44,"endColumn":44},{"ruleId":"168","severity":1,"message":"176","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":10,"suggestions":"177"},{"ruleId":"172","severity":1,"message":"173","line":49,"column":43,"nodeType":"174","messageId":"175","endLine":49,"endColumn":44},{"ruleId":"168","severity":1,"message":"178","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":16,"suggestions":"179"},{"ruleId":"168","severity":1,"message":"180","line":77,"column":8,"nodeType":"170","endLine":77,"endColumn":10,"suggestions":"181"},{"ruleId":"168","severity":1,"message":"182","line":31,"column":8,"nodeType":"170","endLine":31,"endColumn":22,"suggestions":"183"},{"ruleId":"168","severity":1,"message":"184","line":27,"column":8,"nodeType":"170","endLine":27,"endColumn":10,"suggestions":"185"},{"ruleId":"168","severity":1,"message":"186","line":58,"column":8,"nodeType":"170","endLine":58,"endColumn":24,"suggestions":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["190"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["191"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["192"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["194"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["196"],"no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [advancedFields, form]",{"range":"211","text":"212"},"Update the dependencies array to be: [login]",{"range":"213","text":"214"},"Update the dependencies array to be: [fields, item]",{"range":"215","text":"216"},"Update the dependencies array to be: [loadItem]",{"range":"217","text":"218"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"219","text":"220"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"221","text":"222"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"223","text":"224"},[1266,1282],"[advancedFields, form]",[840,842],"[login]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> csvDowload
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> csvDowload
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> csvDowload
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8394,"mtime":1611591658248,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4209,"mtime":1612034327719,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11653,"mtime":1612032996963,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["151","152"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["153"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["154"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["155"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["156","157"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["158"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":33,"column":8,"nodeType":"169","endLine":33,"endColumn":24,"suggestions":"170"},{"ruleId":"171","severity":1,"message":"172","line":18,"column":36,"nodeType":"173","messageId":"174","endLine":18,"endColumn":37},{"ruleId":"171","severity":1,"message":"172","line":44,"column":43,"nodeType":"173","messageId":"174","endLine":44,"endColumn":44},{"ruleId":"167","severity":1,"message":"175","line":21,"column":8,"nodeType":"169","endLine":21,"endColumn":10,"suggestions":"176"},{"ruleId":"171","severity":1,"message":"172","line":49,"column":43,"nodeType":"173","messageId":"174","endLine":49,"endColumn":44},{"ruleId":"167","severity":1,"message":"177","line":21,"column":8,"nodeType":"169","endLine":21,"endColumn":16,"suggestions":"178"},{"ruleId":"167","severity":1,"message":"179","line":77,"column":8,"nodeType":"169","endLine":77,"endColumn":10,"suggestions":"180"},{"ruleId":"167","severity":1,"message":"181","line":31,"column":8,"nodeType":"169","endLine":31,"endColumn":22,"suggestions":"182"},{"ruleId":"167","severity":1,"message":"183","line":27,"column":8,"nodeType":"169","endLine":27,"endColumn":10,"suggestions":"184"},{"ruleId":"167","severity":1,"message":"185","line":58,"column":8,"nodeType":"169","endLine":58,"endColumn":24,"suggestions":"186"},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["189"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has missing dependencies: 'lang', 'login', and 'theme'. Either include them or remove the dependency array.",["190"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["191"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["192"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["194"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["195"],"no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},"Update the dependencies array to be: [advancedFields, form]",{"range":"210","text":"211"},"Update the dependencies array to be: [lang, login, theme]",{"range":"212","text":"213"},"Update the dependencies array to be: [fields, item]",{"range":"214","text":"215"},"Update the dependencies array to be: [loadItem]",{"range":"216","text":"217"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"218","text":"219"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"220","text":"221"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"222","text":"223"},[1266,1282],"[advancedFields, form]",[853,855],"[lang, login, theme]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> fix
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8394,"mtime":1611591658248,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4223,"mtime":1612063926772,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11653,"mtime":1612032996963,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["151","152"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["153"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["154"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["155"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["156","157"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["158"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":33,"column":8,"nodeType":"169","endLine":33,"endColumn":24,"suggestions":"170"},{"ruleId":"171","severity":1,"message":"172","line":18,"column":36,"nodeType":"173","messageId":"174","endLine":18,"endColumn":37},{"ruleId":"171","severity":1,"message":"172","line":44,"column":43,"nodeType":"173","messageId":"174","endLine":44,"endColumn":44},{"ruleId":"167","severity":1,"message":"175","line":41,"column":8,"nodeType":"169","endLine":41,"endColumn":21,"suggestions":"176"},{"ruleId":"171","severity":1,"message":"172","line":51,"column":43,"nodeType":"173","messageId":"174","endLine":51,"endColumn":44},{"ruleId":"167","severity":1,"message":"177","line":21,"column":8,"nodeType":"169","endLine":21,"endColumn":16,"suggestions":"178"},{"ruleId":"167","severity":1,"message":"179","line":77,"column":8,"nodeType":"169","endLine":77,"endColumn":10,"suggestions":"180"},{"ruleId":"167","severity":1,"message":"181","line":31,"column":8,"nodeType":"169","endLine":31,"endColumn":22,"suggestions":"182"},{"ruleId":"167","severity":1,"message":"183","line":27,"column":8,"nodeType":"169","endLine":27,"endColumn":10,"suggestions":"184"},{"ruleId":"167","severity":1,"message":"185","line":58,"column":8,"nodeType":"169","endLine":58,"endColumn":24,"suggestions":"186"},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["189"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useCallback has missing dependencies: 'dispatch' and 'request'. Either include them or remove the dependency array.",["190"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["191"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["192"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["194"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["195"],"no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},"Update the dependencies array to be: [advancedFields, form]",{"range":"210","text":"211"},"Update the dependencies array to be: [request, lang, theme, dispatch]",{"range":"212","text":"213"},"Update the dependencies array to be: [fields, item]",{"range":"214","text":"215"},"Update the dependencies array to be: [loadItem]",{"range":"216","text":"217"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"218","text":"219"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"220","text":"221"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"222","text":"223"},[1266,1282],"[advancedFields, form]",[1489,1502],"[request, lang, theme, dispatch]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> fix
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> fix
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> fix
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8394,"mtime":1611591658248,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4349,"mtime":1612084823732,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11653,"mtime":1612032996963,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["152","153"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["154"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["155"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["156"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["157","158"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],["163","164"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["165"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":33,"column":8,"nodeType":"172","endLine":33,"endColumn":24,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":18,"column":36,"nodeType":"176","messageId":"177","endLine":18,"endColumn":37},{"ruleId":"174","severity":1,"message":"175","line":44,"column":43,"nodeType":"176","messageId":"177","endLine":44,"endColumn":44},{"ruleId":"170","severity":1,"message":"178","line":41,"column":8,"nodeType":"172","endLine":41,"endColumn":21,"suggestions":"179"},{"ruleId":"174","severity":1,"message":"175","line":54,"column":43,"nodeType":"176","messageId":"177","endLine":54,"endColumn":44},{"ruleId":"170","severity":1,"message":"180","line":21,"column":8,"nodeType":"172","endLine":21,"endColumn":16,"suggestions":"181"},{"ruleId":"170","severity":1,"message":"182","line":77,"column":8,"nodeType":"172","endLine":77,"endColumn":10,"suggestions":"183"},{"ruleId":"170","severity":1,"message":"184","line":31,"column":8,"nodeType":"172","endLine":31,"endColumn":22,"suggestions":"185"},{"ruleId":"170","severity":1,"message":"186","line":27,"column":8,"nodeType":"172","endLine":27,"endColumn":10,"suggestions":"187"},{"ruleId":"166","replacedBy":"188"},{"ruleId":"168","replacedBy":"189"},{"ruleId":"170","severity":1,"message":"190","line":58,"column":8,"nodeType":"172","endLine":58,"endColumn":24,"suggestions":"191"},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["194"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useCallback has missing dependencies: 'dispatch' and 'request'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["196"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["197"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["198"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["199"],["192"],["193"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["200"],"no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},"Update the dependencies array to be: [advancedFields, form]",{"range":"215","text":"216"},"Update the dependencies array to be: [request, lang, theme, dispatch]",{"range":"217","text":"218"},"Update the dependencies array to be: [fields, item]",{"range":"219","text":"220"},"Update the dependencies array to be: [loadItem]",{"range":"221","text":"222"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"223","text":"224"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"225","text":"226"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"227","text":"228"},[1266,1282],"[advancedFields, form]",[1489,1502],"[request, lang, theme, dispatch]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> relise4
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> relise4
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> relise4
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8447,"mtime":1612085343316,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4349,"mtime":1612084823732,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11653,"mtime":1612087768542,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1241,"mtime":1611591094270,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["152","153"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["154"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["155"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["156"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["157","158"],"import React, {useCallback, useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    const login = useCallback(async (type, user) => {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }, [theme, lang])\r\n\r\n    useEffect(() => {\r\n        Array.from(document.getElementById(\"vk_auth\").childNodes).forEach(child => {\r\n            child.remove()\r\n        })\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [login])\r\n\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":33,"column":8,"nodeType":"170","endLine":33,"endColumn":24,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":18,"column":36,"nodeType":"174","messageId":"175","endLine":18,"endColumn":37},{"ruleId":"172","severity":1,"message":"173","line":44,"column":43,"nodeType":"174","messageId":"175","endLine":44,"endColumn":44},{"ruleId":"168","severity":1,"message":"176","line":41,"column":8,"nodeType":"170","endLine":41,"endColumn":21,"suggestions":"177"},{"ruleId":"172","severity":1,"message":"173","line":54,"column":43,"nodeType":"174","messageId":"175","endLine":54,"endColumn":44},{"ruleId":"168","severity":1,"message":"178","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":16,"suggestions":"179"},{"ruleId":"168","severity":1,"message":"180","line":77,"column":8,"nodeType":"170","endLine":77,"endColumn":10,"suggestions":"181"},{"ruleId":"168","severity":1,"message":"182","line":31,"column":8,"nodeType":"170","endLine":31,"endColumn":22,"suggestions":"183"},{"ruleId":"168","severity":1,"message":"184","line":27,"column":8,"nodeType":"170","endLine":27,"endColumn":10,"suggestions":"185"},{"ruleId":"168","severity":1,"message":"186","line":58,"column":8,"nodeType":"170","endLine":58,"endColumn":24,"suggestions":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["190"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useCallback has missing dependencies: 'dispatch' and 'request'. Either include them or remove the dependency array.",["191"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["192"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["194"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["196"],"no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [advancedFields, form]",{"range":"211","text":"212"},"Update the dependencies array to be: [request, lang, theme, dispatch]",{"range":"213","text":"214"},"Update the dependencies array to be: [fields, item]",{"range":"215","text":"216"},"Update the dependencies array to be: [loadItem]",{"range":"217","text":"218"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"219","text":"220"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"221","text":"222"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"223","text":"224"},[1266,1282],"[advancedFields, form]",[1489,1502],"[request, lang, theme, dispatch]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> relise6
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8447,"mtime":1612085343316,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1013,"mtime":1611163900135,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4349,"mtime":1612084823732,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11653,"mtime":1612087768542,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1251,"mtime":1612087812993,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["153","154"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["155"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["156"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["157"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["158","159"],"import React, {useCallback, useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    const login = useCallback(async (type, user) => {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }, [theme, lang])\r\n\r\n    useEffect(() => {\r\n        Array.from(document.getElementById(\"vk_auth\").childNodes).forEach(child => {\r\n            child.remove()\r\n        })\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [login])\r\n\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],["163","164"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["165"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["166"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":33,"column":8,"nodeType":"173","endLine":33,"endColumn":24,"suggestions":"174"},{"ruleId":"175","severity":1,"message":"176","line":18,"column":36,"nodeType":"177","messageId":"178","endLine":18,"endColumn":37},{"ruleId":"175","severity":1,"message":"176","line":44,"column":43,"nodeType":"177","messageId":"178","endLine":44,"endColumn":44},{"ruleId":"171","severity":1,"message":"179","line":41,"column":8,"nodeType":"173","endLine":41,"endColumn":21,"suggestions":"180"},{"ruleId":"175","severity":1,"message":"176","line":54,"column":43,"nodeType":"177","messageId":"178","endLine":54,"endColumn":44},{"ruleId":"171","severity":1,"message":"181","line":21,"column":8,"nodeType":"173","endLine":21,"endColumn":16,"suggestions":"182"},{"ruleId":"171","severity":1,"message":"183","line":77,"column":8,"nodeType":"173","endLine":77,"endColumn":10,"suggestions":"184"},{"ruleId":"171","severity":1,"message":"185","line":31,"column":8,"nodeType":"173","endLine":31,"endColumn":22,"suggestions":"186"},{"ruleId":"167","replacedBy":"187"},{"ruleId":"169","replacedBy":"188"},{"ruleId":"171","severity":1,"message":"189","line":27,"column":8,"nodeType":"173","endLine":27,"endColumn":10,"suggestions":"190"},{"ruleId":"171","severity":1,"message":"191","line":58,"column":8,"nodeType":"173","endLine":58,"endColumn":24,"suggestions":"192"},"no-native-reassign",["193"],"no-negated-in-lhs",["194"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["195"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useCallback has missing dependencies: 'dispatch' and 'request'. Either include them or remove the dependency array.",["196"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["197"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["198"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["199"],["193"],["194"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["200"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["201"],"no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [advancedFields, form]",{"range":"216","text":"217"},"Update the dependencies array to be: [request, lang, theme, dispatch]",{"range":"218","text":"219"},"Update the dependencies array to be: [fields, item]",{"range":"220","text":"221"},"Update the dependencies array to be: [loadItem]",{"range":"222","text":"223"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"224","text":"225"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"226","text":"227"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"228","text":"229"},[1266,1282],"[advancedFields, form]",[1489,1502],"[request, lang, theme, dispatch]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> relise6
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> relise6
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> relise6
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3826,"mtime":1611226146272,"results":"38","hashOfConfig":"37"},{"size":8447,"mtime":1612085343316,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1139,"mtime":1612089500963,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4349,"mtime":1612084823732,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11653,"mtime":1612087768542,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1251,"mtime":1612087812993,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["152","153"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["154"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["155"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["156"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["157","158"],"import React, {useCallback, useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    const login = useCallback(async (type, user) => {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }, [theme, lang])\r\n\r\n    useEffect(() => {\r\n        Array.from(document.getElementById(\"vk_auth\").childNodes).forEach(child => {\r\n            child.remove()\r\n        })\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [login])\r\n\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":33,"column":8,"nodeType":"170","endLine":33,"endColumn":24,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":18,"column":36,"nodeType":"174","messageId":"175","endLine":18,"endColumn":37},{"ruleId":"172","severity":1,"message":"173","line":44,"column":43,"nodeType":"174","messageId":"175","endLine":44,"endColumn":44},{"ruleId":"168","severity":1,"message":"176","line":41,"column":8,"nodeType":"170","endLine":41,"endColumn":21,"suggestions":"177"},{"ruleId":"172","severity":1,"message":"173","line":54,"column":43,"nodeType":"174","messageId":"175","endLine":54,"endColumn":44},{"ruleId":"168","severity":1,"message":"178","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":16,"suggestions":"179"},{"ruleId":"168","severity":1,"message":"180","line":77,"column":8,"nodeType":"170","endLine":77,"endColumn":10,"suggestions":"181"},{"ruleId":"168","severity":1,"message":"182","line":31,"column":8,"nodeType":"170","endLine":31,"endColumn":22,"suggestions":"183"},{"ruleId":"168","severity":1,"message":"184","line":27,"column":8,"nodeType":"170","endLine":27,"endColumn":10,"suggestions":"185"},{"ruleId":"168","severity":1,"message":"186","line":58,"column":8,"nodeType":"170","endLine":58,"endColumn":24,"suggestions":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["190"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useCallback has missing dependencies: 'dispatch' and 'request'. Either include them or remove the dependency array.",["191"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["192"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["193"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["194"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["196"],"no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [advancedFields, form]",{"range":"211","text":"212"},"Update the dependencies array to be: [request, lang, theme, dispatch]",{"range":"213","text":"214"},"Update the dependencies array to be: [fields, item]",{"range":"215","text":"216"},"Update the dependencies array to be: [loadItem]",{"range":"217","text":"218"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"219","text":"220"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"221","text":"222"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"223","text":"224"},[1266,1282],"[advancedFields, form]",[1489,1502],"[request, lang, theme, dispatch]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> someFixes
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> someFixes
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> someFixes
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3785,"mtime":1612133777689,"results":"38","hashOfConfig":"37"},{"size":8447,"mtime":1612085343316,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1139,"mtime":1612089500963,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4423,"mtime":1612133424517,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11653,"mtime":1612087768542,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1611159156914,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3572,"mtime":1611933210219,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1251,"mtime":1612089570524,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["151","152"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["153"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["154"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["155"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["156","157","158"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["159"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":33,"column":8,"nodeType":"170","endLine":33,"endColumn":24,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":18,"column":36,"nodeType":"174","messageId":"175","endLine":18,"endColumn":37},{"ruleId":"172","severity":1,"message":"173","line":44,"column":43,"nodeType":"174","messageId":"175","endLine":44,"endColumn":44},{"ruleId":"168","severity":1,"message":"176","line":41,"column":8,"nodeType":"170","endLine":41,"endColumn":21,"suggestions":"177"},{"ruleId":"168","severity":1,"message":"178","line":52,"column":8,"nodeType":"170","endLine":52,"endColumn":21,"suggestions":"179"},{"ruleId":"172","severity":1,"message":"173","line":56,"column":43,"nodeType":"174","messageId":"175","endLine":56,"endColumn":44},{"ruleId":"168","severity":1,"message":"180","line":21,"column":8,"nodeType":"170","endLine":21,"endColumn":16,"suggestions":"181"},{"ruleId":"168","severity":1,"message":"182","line":77,"column":8,"nodeType":"170","endLine":77,"endColumn":10,"suggestions":"183"},{"ruleId":"168","severity":1,"message":"184","line":31,"column":8,"nodeType":"170","endLine":31,"endColumn":22,"suggestions":"185"},{"ruleId":"168","severity":1,"message":"186","line":27,"column":8,"nodeType":"170","endLine":27,"endColumn":10,"suggestions":"187"},{"ruleId":"168","severity":1,"message":"188","line":58,"column":8,"nodeType":"170","endLine":58,"endColumn":24,"suggestions":"189"},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["192"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useCallback has missing dependencies: 'dispatch' and 'request'. Either include them or remove the dependency array.",["193"],"React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["194"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["195"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["196"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["197"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["198"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["199"],"no-global-assign","no-unsafe-negation",{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [advancedFields, form]",{"range":"216","text":"217"},"Update the dependencies array to be: [request, lang, theme, dispatch]",{"range":"218","text":"219"},"Update the dependencies array to be: [theme, lang, login]",{"range":"220","text":"221"},"Update the dependencies array to be: [fields, item]",{"range":"222","text":"223"},"Update the dependencies array to be: [loadItem]",{"range":"224","text":"225"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"226","text":"227"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"228","text":"229"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"230","text":"231"},[1266,1282],"[advancedFields, form]",[1489,1502],"[request, lang, theme, dispatch]",[1837,1850],"[theme, lang, login]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> last
<<<<<<< 84b5086f0dfaeb92acf31b94575240f54c729cf9
>>>>>>> last
<<<<<<< e527e32c7a6f035e3a4bbaa238b3ed0650bab2b3
>>>>>>> last
=======
=======
=======
[{"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js":"1","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js":"2","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js":"3","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js":"4","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js":"5","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js":"6","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js":"7","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js":"8","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js":"9","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js":"10","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js":"11","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js":"12","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js":"13","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js":"14","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js":"15","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js":"16","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js":"17","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js":"18","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js":"19","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js":"20","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js":"21","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js":"22","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js":"23","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js":"24","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js":"25","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js":"26","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js":"27","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js":"28","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js":"29","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js":"30","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js":"31","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js":"32","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js":"33","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js":"34","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js":"35"},{"size":317,"mtime":1609784996776,"results":"36","hashOfConfig":"37"},{"size":3785,"mtime":1612133777689,"results":"38","hashOfConfig":"37"},{"size":8447,"mtime":1612085343316,"results":"39","hashOfConfig":"37"},{"size":1116,"mtime":1609766071482,"results":"40","hashOfConfig":"37"},{"size":1139,"mtime":1612089500963,"results":"41","hashOfConfig":"37"},{"size":107,"mtime":1609510693737,"results":"42","hashOfConfig":"37"},{"size":1298,"mtime":1610484545110,"results":"43","hashOfConfig":"37"},{"size":2695,"mtime":1611158979614,"results":"44","hashOfConfig":"37"},{"size":8770,"mtime":1611934323458,"results":"45","hashOfConfig":"37"},{"size":1425,"mtime":1611158495529,"results":"46","hashOfConfig":"37"},{"size":1792,"mtime":1611345599079,"results":"47","hashOfConfig":"37"},{"size":3715,"mtime":1612021932344,"results":"48","hashOfConfig":"37"},{"size":4423,"mtime":1612133424517,"results":"49","hashOfConfig":"37"},{"size":853,"mtime":1611586289074,"results":"50","hashOfConfig":"37"},{"size":352,"mtime":1611159377405,"results":"51","hashOfConfig":"37"},{"size":1692,"mtime":1611591373996,"results":"52","hashOfConfig":"37"},{"size":3048,"mtime":1610720686457,"results":"53","hashOfConfig":"37"},{"size":2505,"mtime":1611159716133,"results":"54","hashOfConfig":"37"},{"size":1669,"mtime":1610410486549,"results":"55","hashOfConfig":"37"},{"size":3558,"mtime":1611590159144,"results":"56","hashOfConfig":"37"},{"size":11653,"mtime":1612087768542,"results":"57","hashOfConfig":"37"},{"size":5395,"mtime":1611933915307,"results":"58","hashOfConfig":"37"},{"size":2276,"mtime":1611915424281,"results":"59","hashOfConfig":"37"},{"size":2455,"mtime":1611345900817,"results":"60","hashOfConfig":"37"},{"size":2862,"mtime":1610484113652,"results":"61","hashOfConfig":"37"},{"size":8916,"mtime":1611933006386,"results":"62","hashOfConfig":"37"},{"size":5989,"mtime":1612180717678,"results":"63","hashOfConfig":"37"},{"size":4656,"mtime":1610819367290,"results":"64","hashOfConfig":"37"},{"size":3788,"mtime":1612180392809,"results":"65","hashOfConfig":"37"},{"size":440,"mtime":1610297150301,"results":"66","hashOfConfig":"37"},{"size":4812,"mtime":1611155410931,"results":"67","hashOfConfig":"37"},{"size":1251,"mtime":1612089570524,"results":"68","hashOfConfig":"37"},{"size":1454,"mtime":1611591202538,"results":"69","hashOfConfig":"37"},{"size":9171,"mtime":1611934175278,"results":"70","hashOfConfig":"37"},{"size":4244,"mtime":1611590525966,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"13pbhkg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\index.js",[],["152","153"],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\App.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\Header.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\hooks\\useRequest.hook.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\shared\\auth.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\store.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\redux\\reducer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CreateCollectionModal.js",["154"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\"\r\nimport { StyledDropZone } from 'react-drop-zone'\r\nimport 'react-drop-zone/dist/styles.css'\r\nimport ReactLoading from \"react-loading\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction CreateCollectionModal({ show, hide, create, loading, error }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                                \"Click or drop your file here\" :\r\n                                                \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [type, setType] = useState(\"number\")\r\n    const [addError, setAddError] = useState(\"\")\r\n    const [advancedFields, setAdvancedFields] = useState([])\r\n    const [form, setForm] = useState({\r\n        file: null,\r\n        imgUrl: \"\",\r\n        name: \"\",\r\n        theme: \"Alcohol\",\r\n        description: \"\",\r\n        advancedFields\r\n    })\r\n\r\n    function formHandler(value, field) {\r\n        setForm({...form, [field]: value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setForm({...form, advancedFields})\r\n    }, [advancedFields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setForm({...form, file })\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    function addField() {\r\n        let count = 1\r\n        advancedFields.map((e) => {\r\n            if (e.type === type) count++\r\n            return null\r\n        })\r\n        if (count > 3) {\r\n            setAddError(\"Максимальное число полей такого типа 3\")\r\n            return\r\n        }\r\n        setAdvancedFields([...advancedFields, { type, name: \"\" }])\r\n        setAddError(\"\")\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createCollection}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"collectionName\">\r\n                        <Form.Label>{languages[lang].name}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={(e) => formHandler(e.target.value, \"name\")}\r\n                            value={form.name}\r\n                            placeholder={languages[lang].enterName}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Label>{languages[lang].theme}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => formHandler(e.target.value, \"theme\")}\r\n                            value={form.theme}\r\n                        >\r\n                            <option value={\"Alcohol\"}>{languages[lang].alcohol}</option>\r\n                            <option value={\"Books\"}>{languages[lang].books}</option>\r\n                            <option value={\"Coins\"}>{languages[lang].coins}</option>\r\n                            <option value={\"Anime\"}>{languages[lang].anime}</option>\r\n                            <option value={\"Films\"}>{languages[lang].films}</option>\r\n                            <option value={\"Pictures\"}>{languages[lang].pictures}</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Text>{languages[lang].addField}</Form.Text>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            value={type}\r\n                        >\r\n                            <option value={\"number\"}>{languages[lang].numberField}</option>\r\n                            <option value={\"text\"}>{languages[lang].textField}</option>\r\n                            <option value={\"date\"}>{languages[lang].dateField}</option>\r\n                            <option value={\"checkbox\"}>{languages[lang].checkboxField}</option>\r\n                            <option value={\"input\"}>{languages[lang].inlineTextField}</option>\r\n                        </Form.Control>\r\n                        <Row>\r\n                            <p style={{ color: \"red\", margin: \"0 auto\" }}>{addError}</p>\r\n                        </Row>\r\n                        <Row>\r\n                            <Button onClick={addField} variant={\"outline-primary mt-2 mx-auto w-50\"}>{languages[lang].addField}</Button>\r\n                        </Row>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"themeSelect\">\r\n                        <Form.Text>{languages[lang].advancedField}</Form.Text>\r\n                        {\r\n                            advancedFields.map((e, i) => {\r\n                                if (e.type === \"text\") {\r\n                                    return <Form.Control\r\n                                        as=\"textarea\"\r\n                                        placeholder=\"Enter name of textarea\"\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                        className={\"mt-2\"}\r\n                                        key={i}\r\n                                        rows={3}\r\n                                    />\r\n                                }\r\n                                else {\r\n                                    return <Form.Control\r\n                                        type={\"input\"}\r\n                                        placeholder={\"Enter name of \" + e.type + \" field\"}\r\n                                        key={i}\r\n                                        className={\"mt-2\"}\r\n                                        onChange={(e) => {\r\n                                            advancedFields[i].name = e.target.value\r\n                                        }}\r\n                                    />\r\n                                }\r\n                            })\r\n                        }\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].collectionImage}</Form.Label>\r\n                        <StyledDropZone\r\n                            onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                            onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                            children={dropText}\r\n                            style={{ borderColor: dropColor }}\r\n                            onDrop={onDrop}\r\n                        />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"description\">\r\n                        <Form.Label>{languages[lang].shortDescription}</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            rows={4}\r\n                            placeholder={languages[lang].description}\r\n                            onChange={(e) => formHandler(e.target.value, \"description\")}\r\n                            value={form.description}\r\n                        />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                    ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(form)}>\r\n                                {languages[lang].createCollection}\r\n                            </Button>\r\n                        </Row>\r\n                    :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default CreateCollectionModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsContainer.js",["155"],"import React from \"react\"\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Collection from \"./Collection\";\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction CollectionsContainer({ collections }) {\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    return (\r\n        <Container\r\n            style={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                flexDirection: \"row\"\r\n            }}\r\n            className={\"mt-4 py-3\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n                        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}\r\n            fluid\r\n        >\r\n            <Row className={\"w-100 mb-3 justify-content-center mx-auto\"}>\r\n                <h1>{language[lang].collections.collections}</h1>\r\n            </Row>\r\n            <Row className={\"w-100 mt-3 m-auto\"}>\r\n                {\r\n                    collections && collections.length > 0 ?\r\n                        collections.map((e,i) => {\r\n                            return <Collection collection={e} index={i} key={i} />\r\n                        }) :\r\n                        <h5 className={\"text-center w-100\"}>{language[lang].collections.emptyMessage}</h5>\r\n                }\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default CollectionsContainer\r\n","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\Collection.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignUpPage\\SignUpPage.js",["156"],"import React, {useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignUpPage() {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request, success } = useRequest()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    async function sendData(e, lang, theme) {\r\n        e.preventDefault()\r\n        try {\r\n            await request(\r\n                \"/api/auth/register\",\r\n                \"POST\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    role: \"User\",\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (error === null) {\r\n                setEmail(\"\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch(e) {\r\n            throw e\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>{languages[lang].email}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"email\"\r\n                            placeholder=\"Enter email\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: error ? \"red\" : \"green\", marginLeft: 0 }}>\r\n                        <span>{error || success}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => sendData(e, lang, theme)}\r\n                        disabled={loading}\r\n                    >\r\n                        {languages[lang].signUp}\r\n                    </Button>\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signIn\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signIn}</Nav.Link>\r\n                    </Nav>\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\SignInPage\\SignInPage.js",["157","158","159"],"import React, {useCallback, useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Nav, Row} from \"react-bootstrap\"\r\nimport {useRequest} from \"../hooks/useRequest.hook\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport auth from \"../shared/auth\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nexport default function SignInPage() {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const { loading, error, request } = useRequest()\r\n    const dispatch = useDispatch()\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n\r\n    const login = useCallback(async (type, user) => {\r\n        try {\r\n            const data = await request(\r\n                \"/api/auth/login\",\r\n                \"POST\",\r\n                {\r\n                    type,\r\n                    user,\r\n                    lang,\r\n                    theme\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            if (data.ok) {\r\n                localStorage.setItem(\"token\", data.token)\r\n                localStorage.setItem(\"userId\", data.user._id)\r\n                localStorage.setItem(\"type\", type)\r\n                await auth(data.token, dispatch)\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n    }, [theme, lang])\r\n\r\n    useEffect(() => {\r\n        const views = Array.from(document.getElementById(\"vk_auth\").childNodes)\r\n        console.log(views, theme, lang)\r\n        views.forEach(view => {\r\n            view.remove()\r\n        })\r\n        window.VK.Widgets.Auth('vk_auth', {\r\n            onAuth: (user) => login(\"vk\", user)\r\n        })\r\n    }, [theme, lang])\r\n\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-5\" + \" bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Col lg={{ span: 6, offset: 3 }}>\r\n                <Form>\r\n                    <Form.Group controlId=\"username\">\r\n                        <Form.Label>{languages[lang].username}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder={languages[lang].enterName}\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>{languages[lang].password}</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder={languages[lang].password}\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ color: \"red\", marginLeft: 0 }}>\r\n                        <span>{error}</span>\r\n                    </Row>\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        type=\"submit\"\r\n                        onClick={() => login(\"common\", { username, password })}\r\n                        disabled={loading}\r\n                    >{languages[lang].signIn}\r\n                    </Button>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <GoogleLogin\r\n                            clientId=\"808424836478-45hk3q9s4jbhlc9thn8sud56g7ff1u3m.apps.googleusercontent.com\"\r\n                            redirectUri={\"https://itransitkurs.herokuapp.com/\"}\r\n                            onSuccess={(res) => login(\"google\", res.profileObj)}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: \"10px\", marginLeft: 0 }}>\r\n                        <div id=\"vk_auth\"></div>\r\n                    </Row>\r\n\r\n\r\n                    <Nav>\r\n                        <Nav.Link href=\"/signUp\" style={{ padding: 0, marginTop: \"10px\" }}>{languages[lang].signUp}</Nav.Link>\r\n                    </Nav>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\AdminPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\HomePage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionsPage\\CollectionsPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\ControlPanel.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\UsersTable.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\AdminPage\\User.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\CollectionPage.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Info.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemCreateModal.js",["160"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport ReactLoading from \"react-loading\";\r\nimport TagsInput from 'react-tagsinput'\r\nimport 'react-tagsinput/react-tagsinput.css'\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction ItemCreateModal({ create, loading, error, show, hide, fields }) {\r\n    const lang = useSelector(state => state.language)\r\n    const [dropText, setDropText] = useState(lang === \"en\" ?\r\n                                            \"Click or drop your file here\" :\r\n                                            \"Нажми или сбрось свой файл сюда\")\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const [item, setItem] = useState({ fields, name: \"\", tags: [] })\r\n    const [file, setFile] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setItem({...item, fields})\r\n    }, [fields])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setDropText((lang === \"rus\" ? \"Файл выбран (\" : \"File selected (\") + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n        const formData = new FormData()\r\n        formData.append(\"file\", file)\r\n        setFile(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal show={show} onHide={hide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{languages[lang].createItem}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group>\r\n                    <Form.Label>{languages[lang].itemName}</Form.Label>\r\n                    <Form.Control\r\n                        type={\"text\"}\r\n                        onChange={(e) => setItem({...item, name: e.target.value})}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text className={\"mb-2\"}>{languages[lang].tags}</Form.Text>\r\n                    <TagsInput value={item.tags} onChange={(tags) => setItem({...item, tags})} addKeys={[9, 13, 32]} />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Text>{languages[lang].advancedFields}</Form.Text>\r\n                    {\r\n                        fields.map((field, i) => {\r\n                            if (field.type === \"text\") {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        as=\"textarea\"\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = e.target.value\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            } else {\r\n                                return [\r\n                                    <Form.Label key={i}>{field.name}</Form.Label>,\r\n                                    <Form.Control\r\n                                        key={i + 1}\r\n                                        type={field.type}\r\n                                        onChange={(e) => {\r\n                                            item.fields[i].value = field.type !== \"checkbox\"\r\n                                                ? e.target.value :\r\n                                                e.target.checked\r\n                                        }}\r\n                                    />\r\n                                ]\r\n                            }\r\n                        })\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group controlId=\"image\">\r\n                    <Form.Label>{languages[lang].itemImage}</Form.Label>\r\n                    <StyledDropZone\r\n                        onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                        onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                        children={dropText}\r\n                        style={{ borderColor: dropColor }}\r\n                        onDrop={onDrop}\r\n                    />\r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"container align-items-md-center\">\r\n                <Row className={\"justify-content-md-center w-100\"}>\r\n                    <span className={\"my-1\"} style={{ color: \"red\"}}>{error ? error : \"\"}</span>\r\n                </Row>\r\n                {\r\n                    !loading\r\n                        ?\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <Button variant=\"outline-success\" onClick={() => create(item, file)}>\r\n                                {languages[lang].createItem}\r\n                            </Button>\r\n                        </Row>\r\n                        :\r\n                        <Row className=\"justify-content-md-center w-100\">\r\n                            <ReactLoading type={\"spin\"} color={\"#000000\"} height={30} width={30} />\r\n                        </Row>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ItemCreateModal","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ItemsContainer.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\Item.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemPage.js",["161"],"import React, {useEffect, useState} from \"react\"\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ReactLoading from \"react-loading\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\nimport Info from \"./Info\";\r\nimport ItemFields from \"./ItemFields\";\r\nimport Comments from \"./Comments\";\r\n\r\nfunction ItemPage() {\r\n    const id = useParams().id\r\n    const {loading, request, error} = useRequest()\r\n    const [item, setItem] = useState({})\r\n\r\n    async function loadItem() {\r\n        const data = await request(\r\n            \"/api/items/getItem\",\r\n            \"POST\",\r\n            {id},\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setItem(data.item)\r\n        }\r\n    }\r\n\r\n    async function edit(fields) {\r\n        if (fields.file) {\r\n            const formData = new FormData()\r\n            formData.append(\"file\", fields.file)\r\n            const data = await request(\r\n                \"/api/files/fileUpload\",\r\n                \"POST\",\r\n                formData\r\n            )\r\n            if (data && data.ok) {\r\n                fields.img_id = data.img_id\r\n                fields.img_format = data.img_format\r\n                await request(\r\n                    \"/api/items/editItem\",\r\n                    \"POST\",\r\n                    {\r\n                        ownerId: item.ownerId,\r\n                        id: item._id,\r\n                        token: localStorage.getItem(\"token\"),\r\n                        edit: fields\r\n                    },\r\n                    {\r\n                        \"Content-Type\": \"application/json\"\r\n                    }\r\n                )\r\n                loadItem().then()\r\n            }\r\n        } else {\r\n            await request(\r\n                \"/api/items/editItem\",\r\n                \"POST\",\r\n                {\r\n                    ownerId: item.ownerId,\r\n                    id: item._id,\r\n                    token: localStorage.getItem(\"token\"),\r\n                    edit: fields\r\n                },\r\n                {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            )\r\n            loadItem().then()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadItem().then()\r\n    }, [])\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60}/>\r\n            </Row>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container>\r\n                <Info loading={loading} edit={edit} error={error} info={item} />\r\n                <ItemFields item={item} loadItem={loadItem} />\r\n                <Comments itemID={item._id}/>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n}\r\nexport default ItemPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Info.js",["162"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {StyledDropZone} from \"react-drop-zone\";\r\nimport Image from \"cloudinary-react/lib/components/Image\";\r\nimport Transformation from \"cloudinary-react/lib/components/Transformation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport * as Icon from \"react-bootstrap-icons\"\r\nconst languages = require(\"../languages.json\")\r\n\r\nfunction Info({ info, loading2, edit }) {\r\n    const role = useSelector(state => state.role)\r\n    const userId = useSelector(state => state.userId)\r\n    const isAuthUser = useSelector(state => state.isAuthUser)\r\n    const lang = useSelector(state => state.language)\r\n    const theme = useSelector(state => state.theme)\r\n    const [isLiked, setIsLiked] = useState(true)\r\n    const [likesCount, setLikesCount] = useState(0)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [dropText, setDropText] = useState(\"Click or drop your file here\")\r\n    const [values, setValues] = useState({ name: info.name, file: null})\r\n    const [dropColor, setDropColor] = useState(\"#888\")\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        setValues({ name: info.name, file: null })\r\n        if (info.likes && isAuthUser) {\r\n            setIsLiked(info.likes.includes(userId))\r\n            setLikesCount(info.likes.length)\r\n        }\r\n    }, [info, userId])\r\n\r\n    function onDrop(file) {\r\n        const name = file.name.length < 12 ? file.name : file.name.substr(0, 9) + \"...\"\r\n        setValues({...values, file})\r\n        setDropText(\"Файл выбран (\" + name + \")\")\r\n        setDropColor(\"#74d239\")\r\n    }\r\n\r\n    async function setLike() {\r\n        if (loading || !isAuthUser) return\r\n        setIsLiked(!isLiked)\r\n        const data = await request (\r\n            \"/api/items/likeItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            setIsLiked(data.like)\r\n            setLikesCount(likesCount + (data.like ? 1 : -1))\r\n        }\r\n    }\r\n\r\n    async function deleteItem() {\r\n        const data = await request(\r\n            \"/api/items/deleteItem\",\r\n            \"POST\",\r\n            {\r\n                token: localStorage.getItem(\"token\"),\r\n                id: info._id,\r\n                ownerId: info.ownerId,\r\n                parent: info.parent\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            window.location = \"/collection/\" + info.parent\r\n        }\r\n    }\r\n\r\n    function formHandler(e) {\r\n        setValues({...values, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function tryEdit() {\r\n        const fields = { file: values.file }\r\n        if (values.name !== info.name) fields.name = values.name\r\n        edit(fields)\r\n    }\r\n\r\n    return (\r\n        <Container className={\"mt-4 py-3 bg-\" + (theme === \"dark\" ? \"semi-dark\" : \"white\")\r\n        + \" text-\" + (theme === \"dark\" ? \"white-50\" : \"dark\")}>\r\n            <Row>\r\n                <Col xl={4} lg={5} md={6} xs={12} className={\"text-center px-lg-2 px-0 text-lg-left\"}>\r\n                    {\r\n                        editMode ?\r\n                            <StyledDropZone\r\n                                onMouseEnter={() => {if (dropColor === \"#888\")setDropColor(\"#46b2ae\")}}\r\n                                onMouseLeave={() => {if (dropColor === \"#46b2ae\") setDropColor(\"#888\")}}\r\n                                children={dropText}\r\n                                style={{ borderColor: dropColor }}\r\n                                onDrop={onDrop}\r\n                            /> :\r\n                            <Image className={\"ml-lg-4\"} cloudName=\"itransit\" publicId={info.img_id} format={info.img_format}>\r\n                                <Transformation crop=\"fill\" gravity=\"faces\" width=\"300\" height=\"200\"/>\r\n                            </Image>\r\n                    }\r\n                </Col>\r\n                <Col xl={8} lg={7} md={6} xs={12} className={\"text-center text-md-left px-2\"}>\r\n                    <Row>\r\n                        <Col lg={7} md={7} xs={12}>\r\n                            {\r\n                                editMode ?\r\n                                    <Form.Control onChange={formHandler} name={\"name\"} type=\"text\" value={values.name} />\r\n                                    :\r\n                                    <h2 className={\"fs-6\"}>{info.name}</h2>\r\n                            }\r\n                            <p><strong>{languages[lang].collections.collection}</strong>: <a href={\"/collection/\" + info.parent}>{info.parentName}</a></p>\r\n                            <Col>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    {\r\n                                        isLiked ?\r\n                                            <Icon.HeartFill\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            /> :\r\n                                            <Icon.Heart\r\n                                                style={{\r\n                                                    fontSize: \"30px\",\r\n                                                    color: \"#dd1c1c\",\r\n                                                    cursor: \"pointer\"\r\n                                                }}\r\n                                                onClick={setLike}\r\n                                            />\r\n                                    }\r\n                                </Row>\r\n                                <Row className={\"justify-content-center\"}>\r\n                                    <span>{likesCount}</span>\r\n                                </Row>\r\n                            </Col>\r\n\r\n                        </Col>\r\n                        <Col style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}>\r\n                            {\r\n                                role === \"Admin\" || userId === info.ownerId ?\r\n                                    editMode ?\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-success mb-2 mb-lg-3\"}\r\n                                                key={0}\r\n                                                disabled={loading2}\r\n                                                onClick={tryEdit}\r\n                                            >{languages[lang].save}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger my-0 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(false)}\r\n                                                disabled={loading2}\r\n                                                key={1}\r\n                                            >{languages[lang].cancel}\r\n                                            </Button>\r\n                                        ] :\r\n                                        [\r\n                                            <Button\r\n                                                variant={\"outline-primary mb-2 mt-lg-3\"}\r\n                                                onClick={() => setEditMode(true)}\r\n                                                key={2}\r\n                                            >{languages[lang].editItem}\r\n                                            </Button>,\r\n                                            <Button\r\n                                                variant={\"outline-danger mb-2 mt-lg-3\"}\r\n                                                onClick={deleteItem}\r\n                                                key={3}\r\n                                            >{languages[lang].delete}\r\n                                            </Button>\r\n                                        ]\r\n                                        : []\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Info","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\ItemFields.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\ChangeFieldsModal.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comments.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\ItemPage\\Comment.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\Search\\SearchPage.js",["163"],"import React, {useEffect, useState} from \"react\"\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport {useParams} from \"react-router\";\r\nimport {useRequest} from \"../hooks/useRequest.hook\";\r\nimport ItemsContainer from \"../CollectionPage/ItemsContainer\";\r\nimport ReactLoading from \"react-loading\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport TagsInput from \"react-tagsinput\";\r\nimport {useSelector} from \"react-redux\";\r\nconst languages = require(\"../languages.json\")\r\n\r\n\r\nfunction SearchPage() {\r\n    const paramText = useParams().text\r\n    const lang = useSelector(state => state.language)\r\n    const [text, setText] = useState(paramText ? paramText : \"\")\r\n    const [input, setInput] = useState(\"\")\r\n    const [tags, setTags] = useState([])\r\n    const [allTags, setAllTags] = useState([])\r\n    const [suggestions, setSuggestions] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const { request, loading } = useRequest()\r\n\r\n    useEffect(() => {\r\n        if (text) findItems().then()\r\n        loadTags().then()\r\n    }, [])\r\n\r\n    function suggestionHandler(value) {\r\n        setInput(value)\r\n        if (!value) return\r\n        setSuggestions(allTags.filter(e => {\r\n            let bool = false\r\n            for (let i = 0; i <= e.name.length - value.length; i++) {\r\n                if (e.name.substr(i, value.length) === value) bool = true\r\n            }\r\n            return bool\r\n        }))\r\n    }\r\n\r\n    async function loadTags() {\r\n        const data = await request(\r\n            \"/api/items/getTags\"\r\n        )\r\n        if (data && data.ok) {\r\n            setAllTags(data.tags)\r\n        }\r\n    }\r\n\r\n    async function findItems() {\r\n        const data = await request (\r\n            \"/api/items/findItems\",\r\n            \"POST\",\r\n            {\r\n                text,\r\n                tags\r\n            },\r\n            {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        )\r\n        if (data && data.ok) {\r\n            console.log(data)\r\n            setResult(data.items)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Container>\r\n                <Form inline>\r\n                    <Row className={\"w-100 p-3 mt-3\"} style={{ boxShadow: \"0 0 10px 0 rgba(0, 0, 0, 0.2)\"}}>\r\n                        <Col xs={8} sm={9} md={10} xl={11}>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={text}\r\n                                placeholder={languages[lang].header.search}\r\n                                className={\"w-100\"}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={4} sm={3} md={2} lg={1}>\r\n                            <Button variant=\"outline-info\" onClick={findItems}>{languages[lang].header.search}</Button>\r\n                        </Col>\r\n                        <Col xs={8} className={\"mt-3\"}>\r\n                            <TagsInput\r\n                                renderInput={({ addTag, ...props}) => AutocompleteRenderInput({ addTag, suggestions, ...props })}\r\n                                value={tags}\r\n                                inputProps={{ style: {width: \"100%\"} }}\r\n                                onChange={(tags) => setTags(tags)}\r\n                                onChangeInput={suggestionHandler}\r\n                                inputValue={input}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n            {\r\n                loading ?\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <ReactLoading type={\"spin\"} color={\"#000000\"} height={60} width={60} />\r\n                    </Row> :\r\n                    <ItemsContainer items={result} size={2} />\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction AutocompleteRenderInput({ addTag, suggestions, ...props }) {\r\n\r\n    return (\r\n        <Autosuggest\r\n            suggestions={suggestions}\r\n            shouldRenderSuggestions={(value) => value && value.trim().length > 0}\r\n            getSuggestionValue={(suggestion) => suggestion.name}\r\n            renderSuggestion={renderSuggestion}\r\n            onSuggestionSelected={(e, {suggestion}) => {\r\n                addTag(suggestion.name)\r\n            }}\r\n            inputProps={{ ...props, onChange: props.onChange }}\r\n            onSuggestionsClearRequested={() => {}}\r\n            onSuggestionsFetchRequested={() => {}}\r\n        />\r\n    )\r\n}\r\n\r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n        <div className={\"suggestion\"}>\r\n            {suggestion.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\LastItems.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\HomePage\\BiggestCollections.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\FilterView.js",[],"C:\\Users\\suzuya\\Desktop\\iTrasnsit\\kursovaya_iTransit\\client\\src\\CollectionPage\\SortView.js",["164"],"import React, {useEffect, useState} from \"react\"\r\nimport {Col, Form, Row} from \"react-bootstrap\"\r\nimport {useSelector} from \"react-redux\";\r\nconst language = require(\"../languages.json\")\r\n\r\nfunction SortView({ showedItems, setShowedItems, allItems }) {\r\n    const [fields, setFields] = useState(null)\r\n    const [sort, setSort] = useState({ value: \"no\" })\r\n    const [itemsCount, setItemsCount] = useState(0)\r\n    const lang = useSelector(state => state.language)\r\n\r\n    useEffect(() => {\r\n        if (showedItems && showedItems.length > 0) setFields([...showedItems[0].fields])\r\n    }, [showedItems])\r\n\r\n    useEffect(() => {\r\n        if (itemsCount !== showedItems.length) {\r\n            setSort({ value: \"no\", control: \"no\" })\r\n            setItemsCount(showedItems.length)\r\n        }\r\n    }, [itemsCount, showedItems])\r\n\r\n    useEffect(() => {\r\n        let items = [...showedItems]\r\n        if (!sort ) return\r\n        else if (sort.value === \"no\")  setShowedItems([...allItems])\r\n        else if (sort.index === undefined) {\r\n            items = items.sort((a, b) => {\r\n                if (sort.value === \"ml\") {\r\n                    return a.name <= b.name ? -1 : 1\r\n                } else if (sort.value === \"lm\") return a.name <= b.name ? 1 : -1\r\n                return 1\r\n            })\r\n        } else {\r\n            if (sort.type === \"number\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return Number(a.fields[sort.index].value) <= Number(b.fields[sort.index].value) ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            } else if (sort.type === \"date\") {\r\n                items = items.sort((a, b) => {\r\n                    if (sort.value === \"ml\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? 1 : -1\r\n                    } else if (sort.value === \"lm\") {\r\n                        return (new Date(a.fields[sort.index].value)).getTime()\r\n                                <= (new Date(b.fields[sort.index].value)).getTime() ? -1 : 1\r\n                    }\r\n                    return 1\r\n                })\r\n            }\r\n        }\r\n        setShowedItems([...items])\r\n    }, [sort, allItems])\r\n\r\n    return (\r\n        <Row className={\"justify-content-end\"}>\r\n            <Col>\r\n                <Row>\r\n                    <Form.Text>Сортировка</Form.Text>\r\n                    <Form.Control value={sort.control} as={\"select\"} onChange={(e) => setSort({\r\n                        value: e.target.value.split(\" \")[0],\r\n                        index: e.target.value.split(\" \")[1],\r\n                        type: e.target.value.split(\" \")[2],\r\n                        control: e.target.value\r\n                    })}>\r\n                        <option value={\"no\"}>{language[lang].noSort}</option>\r\n                        <option value={\"ml\"}>{language[lang].nameAZ}</option>\r\n                        <option value={\"lm\"}>{language[lang].nameZA}</option>\r\n                        {\r\n                            fields && fields.map((e, i) => {\r\n                                if (e.type === \"number\" || e.type === \"date\"){ return [\r\n                                    <option\r\n                                        value={\"lm \" + String(i) + \" \" + e.type}\r\n                                        key={i}\r\n                                    >{`${e.name} ${language[lang].lessToMore}`}</option>,\r\n                                    <option\r\n                                        value={\"ml \" + String(i) + \" \" + e.type}\r\n                                        key={i + 1}\r\n                                    >{`${e.name} ${language[lang].moreToLess}`}</option>\r\n                                ]} else return null\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SortView",{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":33,"column":8,"nodeType":"171","endLine":33,"endColumn":24,"suggestions":"172"},{"ruleId":"173","severity":1,"message":"174","line":18,"column":36,"nodeType":"175","messageId":"176","endLine":18,"endColumn":37},{"ruleId":"173","severity":1,"message":"174","line":44,"column":43,"nodeType":"175","messageId":"176","endLine":44,"endColumn":44},{"ruleId":"169","severity":1,"message":"177","line":41,"column":8,"nodeType":"171","endLine":41,"endColumn":21,"suggestions":"178"},{"ruleId":"169","severity":1,"message":"179","line":52,"column":8,"nodeType":"171","endLine":52,"endColumn":21,"suggestions":"180"},{"ruleId":"173","severity":1,"message":"174","line":56,"column":43,"nodeType":"175","messageId":"176","endLine":56,"endColumn":44},{"ruleId":"169","severity":1,"message":"181","line":21,"column":8,"nodeType":"171","endLine":21,"endColumn":16,"suggestions":"182"},{"ruleId":"169","severity":1,"message":"183","line":77,"column":8,"nodeType":"171","endLine":77,"endColumn":10,"suggestions":"184"},{"ruleId":"169","severity":1,"message":"185","line":31,"column":8,"nodeType":"171","endLine":31,"endColumn":22,"suggestions":"186"},{"ruleId":"169","severity":1,"message":"187","line":27,"column":8,"nodeType":"171","endLine":27,"endColumn":10,"suggestions":"188"},{"ruleId":"169","severity":1,"message":"189","line":58,"column":8,"nodeType":"171","endLine":58,"endColumn":24,"suggestions":"190"},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["193"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useCallback has missing dependencies: 'dispatch' and 'request'. Either include them or remove the dependency array.",["194"],"React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array.",["195"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. You can also do a functional update 'setItem(i => ...)' if you only need 'item' in the 'setItem' call.",["196"],"React Hook useEffect has a missing dependency: 'loadItem'. Either include it or remove the dependency array.",["197"],"React Hook useEffect has a missing dependency: 'isAuthUser'. Either include it or remove the dependency array.",["198"],"React Hook useEffect has missing dependencies: 'findItems', 'loadTags', and 'text'. Either include them or remove the dependency array.",["199"],"React Hook useEffect has missing dependencies: 'setShowedItems' and 'showedItems'. Either include them or remove the dependency array. If 'setShowedItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["200"],"no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},"Update the dependencies array to be: [advancedFields, form]",{"range":"217","text":"218"},"Update the dependencies array to be: [request, lang, theme, dispatch]",{"range":"219","text":"220"},"Update the dependencies array to be: [theme, lang, login]",{"range":"221","text":"222"},"Update the dependencies array to be: [fields, item]",{"range":"223","text":"224"},"Update the dependencies array to be: [loadItem]",{"range":"225","text":"226"},"Update the dependencies array to be: [info, isAuthUser, userId]",{"range":"227","text":"228"},"Update the dependencies array to be: [findItems, loadTags, text]",{"range":"229","text":"230"},"Update the dependencies array to be: [sort, allItems, showedItems, setShowedItems]",{"range":"231","text":"232"},[1266,1282],"[advancedFields, form]",[1489,1502],"[request, lang, theme, dispatch]",[1837,1850],"[theme, lang, login]",[969,977],"[fields, item]",[2312,2314],"[loadItem]",[1464,1478],"[info, isAuthUser, userId]",[1068,1070],"[findItems, loadTags, text]",[2500,2516],"[sort, allItems, showedItems, setShowedItems]"]
>>>>>>> superMegaGiperLast
>>>>>>> superMegaGiperLast
>>>>>>> superMegaGiperLast
